'use strict';

var Joi = require('joi');
var _ = require('lodash');

function buildSchema (baseFields, requiredForPost, attributeFields, additionalForbiddenAttribs) {
  var _forbiddenId = {
    id: Joi.any().forbidden()
  };
  var _timestampFields = {
    created: Joi.date().iso(),
    last_updated: Joi.date().iso()
  };

  var incomingPost = makeSchema(true, _forbiddenId).unknown(true);
  if (requiredForPost.length > 0) {
    incomingPost.requiredKeys(requiredForPost);
  }
  var incomingPatch = makeSchema(false).unknown(true);
  var outgoingGet = makeSchema(true, _timestampFields).unknown(true);
  var forbiddenAttributes = Object.keys(baseFields).concat(additionalForbiddenAttribs);

  return {
    incomingPost: incomingPost,
    incomingPatch: incomingPatch,
    outgoingGet: outgoingGet,
    columns: _.keys(baseFields),
    forbiddenAttributes: forbiddenAttributes
  };

  function makeSchema (attribs, add, remove) {
    if (!add) add = {};
    if (!remove) remove = [];
    var modified = _.extend(
      {},
      _.omit(baseFields, remove),
      attribs ? attributeFields : {},
      add
    );
    return Joi.object().keys(modified);
  }
}

module.exports = buildSchema;
