'use strict';

const Joi = require('joi');
const common = require('../common');

// INPUT VALIDATIONS

// TODO: routingNumber is required if country = 'us'
const _bankAccount = Joi.object().keys({
  accountNumber: Joi.string().max(255).required(),
  routingNumber: Joi.string().length(9),
  country: Joi.string().max(2).required(),
  bankName: Joi.string().max(255)
});

// TODO: will be very similar to credit card; might even be the same except Stripe only allows debit cards in the US
const _debitCard = Joi.object().keys({});

const _paypal = Joi.object().keys({
  email: Joi.string().email().max(255).description('Email address used to register a valid PayPal account'),
  withdrawalMethodId: Joi.number().integer().positive().description('The id of a stored withdrawal method to use')
}).xor('email', 'withdrawalMethodId');

const _dwolla = Joi.object().keys({
  recipient: Joi.string().max(255).required()
});

const _payu = Joi.object().keys({
  desc: Joi.string().max(255).required(),
  first_name: Joi.string().max(255).required(),
  last_name: Joi.string().max(255).required(),
  email: Joi.string().email().required()
});

const _paytm = Joi.object().keys({
  toAccount: Joi.string().max(255).required(),
  existingAccount: Joi.boolean().required()
});

const _bitcoin = Joi.object().keys({
  toAccount: Joi.string().max(256),
  withdrawalMethodId: Joi.number().integer().positive().description('The id of a stored withdrawal method to use')
}).xor('toAccount', 'withdrawalMethodId');

const _ominto = Joi.object().keys({});
const _novalnet = Joi.object().keys({});


const _stripe = Joi.object().keys({
  country: Joi.string().max(256),
  token: Joi.string().max(256),
  withdrawalMethodId: Joi.number().integer().positive().description('The id of a stored withdrawal method to use')
}).without('withdrawalMethodId', ['country', 'token']);

const _payoneer = Joi.object().keys({
  payoneerId: Joi.string().max(255),
  description: Joi.string().max(255).default('Thank you for your patronage'),
  withdrawalMethodId: Joi.number().integer().positive().description('The id of a stored withdrawal method to use')
}).xor('payoneerId', 'withdrawalMethodId');

const getTransactionList = Joi.object().keys({
  startDate: Joi.string(),
  endDate: Joi.string(),
  state: Joi.string(),
  type: Joi.string(),
  merchantId: Joi.string(),
  amtGreaterThan: Joi.number().integer(),
  amtLessThan: Joi.number().integer(),
  limit: Joi.number().integer(),
  offset: Joi.number().integer(),
  u: Joi.string()
});

const withdrawal = Joi.object().keys({
  userId: common.id,
  amount: Joi.number().integer().positive().max(9999999999).description('Currency amount in the lowest subdivision of' + 'the currency, e.g. cents for USD'),
  currency: Joi.string().lowercase().length(3).required().description('ISO 4217 three letter currency code'),
  fromCurrencies: Joi.array().items(Joi.string().length(3)).optional().description('Array of ISO 4217 currencies to ' + 'use for this withdrawal'),
  bankAccount: _bankAccount,
  stripe: _stripe,
  novalnet: _novalnet,
  debitCard: _debitCard,
  paypal: _paypal,
  dwolla: _dwolla,
  payu: _payu,
  bitcoin: _bitcoin,
  payoneer: _payoneer,
  paytm: _paytm,
  ominto: _ominto
}).xor('stripe', 'bankAccount', 'debitCard', 'paypal', 'dohabank', 'dwolla','novalnet', 'infiPlanet', 'payu', 'bitcoin',
 'ominto', 'payoneer', 'paytm');

// OUTPUT VALIDATIONS

const _localizedAmount = Joi.object().keys({
  currency: Joi.string().lowercase().max(3).description('ISO 4217 three letter currency code -- this represents the user\'s currency display preferance, not necessarily the currency used to make the transaction'),
  purchaseAmount: Joi.string().description('If the transaction type is cashback, this will be the total purchase amount for the user\'s transaction with the merchant -- converted to a display-friendly string in the user\'s currency display preference'),
  amountToUser: Joi.string().description('The currency amount that went to the user for this particular transaction -- converted to a display-friendly string in the user\'s currency display preference')
});

const transactionViewModel = Joi.object().keys({
  id: common.id,
  name: Joi.string().description('Displayable name of the transaction'),
  description: Joi.string().description('Brief description of the transaction'),
  merchantId: Joi.string().description('GUID for the merchant tied to this transaction (will appear only on cashback and commission types, not withdrawals'),
  merchantName: Joi.string().description('Displayable name of the merchant tied to this transaction (will appear only on cashback and commission types, not withdrawals'),
  type: Joi.string().valid('cashback', 'commission', 'withdrawal').description('Transaction type -- cashback is paid from a merchant due to a finished purchase, commission is used for referral payouts, and withdrawals are for the user withdrawing money to a bank account or other available payment method'),
  currency: Joi.string().lowercase().max(3).description('ISO 4217 three letter currency code -- this is the currency which was used for the transaction, e.g. a merchant may have paid us in USD despite the user preferring to view currencies in EUR'),
  viewState: Joi.string().valid('Pending', 'Completed', 'Locked').insensitive().description('A display-friendly state which takes into account the most recent state of the transaction'),
  viewDate: Joi.string().description('A display-friendly timestamp of the most recent state of the transaction'),

  state: Joi.string().valid('tracked', 'initiated', 'confirmed', 'paid', 'locked').insensitive().description('Current state of the transaction. Tracked, initiated, and confirmed are all pending states. Paid is the completed / available state. ' +
    'For transactions of type cashback: tracked indicates that an outclick to a merchant website was recorded, ' +
    'initiated indicates that the merchant has acknowledged the initiation of a purchase, ' +
    'confirmed indicates that the merchant has confirmed payment for the purchase and is in the process of sending us the cashback funds, ' +
    'and paid indicates that we have received funds from the merchant and the user has received their portion of the cashback. ' +
    'For transactions of type commission: tracked indicates that an outclick to a merchant website by a referral was recorded, ' +
    'initiated indicates that the merchant has acknolwedged the initiation of a purchase by a referral,' +
    'confirmed indicatest that the merchant has confirmed payment for the purchase made by a referral and is in the process of sending us the cashback funds ,' +
    'and paid indicates that we have received funds from the merchant and the user has received their commission from the referral\'s purchase. ' +
    'For transactions of type withdrawal: tracked indicates that an initial request for withdrawal has been received, ' +
    "initiated indicates that we have started the withdrawal process and have contacted the relevant payment gateway to initiate payment to the user's account of preference, " +
    'confirmed indicates that the payment gateway has accepted out request for withdrawal and is in the process of transferring funds, ' +
    "and paid indicates that the payment gateway has confirmed receipt of the withdrawal funds to the user's account of choice. " +
    'For ALL types of transactions, locked indicates an administrative lock on this particular transaction (e.g. flagged for review, dispute, etc.)'),

  cashbackRate: Joi.string().description("If the transaction type is cashback, this will be the user's cashback rate for that merchant at the time of purchase"),
  commissionRate: Joi.string().description("If the transaction type is commission, this will be the user's referral commission rate at the time of their referral's purchase"),
  purchaseAmount: Joi.number().integer().description("If the transaction type is cashback, this will be the total purchase amount for the user's transaction with the merchant"),
  amountToUser: Joi.number().integer().description('The currency amount that went to the user for this particular transaction'),
  localizedAmount: _localizedAmount.description("Localized transaction amounts to be used for display only -- converts to user's currency display preference"),

  // TODO: what do timestamps look like on the way out? Can we assert these are unix timestamps?
  dateTracked: Joi.string().description('Timestamp when the transaction entered the tracked state (see the state definitions for more clarity)'),
  dateInitiated: Joi.string().description('Timestamp when the transaction entered the initiated state (see the state definitions for more clarity)'),
  dateConfirmed: Joi.string().description('Timestamp when the transaction entered the confirmed state (see the state definitions for more clarity)'),
  datePaid: Joi.string().description('Timestamp when the transaction entered the paid state (see the state definitions for more clarity)'),
  dateLocked: Joi.string().description('Timestamp when the transaction entered the locked state (see the state definitions for more clarity)')
});

const transactionViewModelOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  transactions: Joi.array().items(transactionViewModel).description('An array of transaction objects')
});

module.exports = {
  getTransactionList: getTransactionList,
  withdrawal: withdrawal,
  transactionViewModelOutput: transactionViewModelOutput
};
