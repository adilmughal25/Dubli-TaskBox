'use strict';

var Joi = require('joi');
const common = require('../common');
const merchants = require('./merchantApi');

// INCOMING VALIDATIONS

var patch = Joi.object().keys({
  name: Joi.string().max(255).allow(""),
  description: Joi.string(),
  language: common.lang,
  region: common.region,
  currency: common.currency,
  email: Joi.string().description("User's email address"),
  phone: Joi.string().description("User's phone number"),
  password: Joi.string().description("User's password"),
  givenName: Joi.string().max(255).allow("").description('Given name of the user'),
  familyName: Joi.string().max(255).allow("").description('Family name of the user'),
  dateOfBirth: Joi.date().iso().description("User's date of birth"),
  gender: Joi.string().valid('m', 'f', 'o', ''),
  referral: Joi.object().description('An object containing referral information'),
  regionChanged: Joi.number().integer().max(1).description('RegionChanged flag which is represented as a tinyint -- only possible values should be 0 or 1'),
  newsLetterFollowed: Joi.number().integer().max(1).description('RegionChanged flag which is represented as a tinyint -- only possible values should be 0 or 1'),
  last_pw_updated_date: Joi.string().description('Last day that the password has changed'),
  card_pan_id: Joi.string().description('PAN CARD ID for India User only'),
  id: Joi.forbidden(),
  whitelabel: Joi.string().description("User's whitelabel"),
  slug: Joi.forbidden(),
  otp_secret: Joi.forbidden(),
  facebook_id: Joi.forbidden(),
  google_id: Joi.forbidden(),
  twitter_id: Joi.forbidden(),
  member_id: Joi.forbidden(),
  partner_id: Joi.forbidden(),
  payoneer_payee_id: Joi.forbidden(),
  payoneer_id: Joi.forbidden(),
  payoneer_card_signup_status: Joi.forbidden(),
  payoneer_method: Joi.forbidden(),
  payoneer_signup_url: Joi.forbidden(),
  commission_type: Joi.forbidden(),
  commission_rate: Joi.forbidden(),
  program_referrer: Joi.forbidden(),
  sales_referrer: Joi.forbidden(),
  user_referrer: Joi.forbidden(),
  active: Joi.forbidden(),
  created: Joi.forbidden(),
  last_updated: Joi.forbidden(),
  twitter_screen_name: Joi.forbidden(),
  email_bounced: Joi.number().integer().max(1)

});

var uiPrefs = Joi.object().keys({
  language: common.lang,
  region: common.region,
  currency: common.currency,
  regionChanged: common.regionChanged,
  newsLetterFollowed:common.newsLetterFollowed,
  id: Joi.forbidden(),
  whitelabel: Joi.forbidden(),
  name: Joi.forbidden(),
  slug: Joi.forbidden(),
  description: Joi.forbidden(),
  email: Joi.forbidden(),
  password: Joi.forbidden(),
  phone: Joi.forbidden(),
  otp_secret: Joi.forbidden(),
  facebook_id: Joi.forbidden(),
  google_id: Joi.forbidden(),
  twitter_id: Joi.forbidden(),
  member_id: Joi.forbidden(),
  partner_id: Joi.forbidden(),
  payoneer_payee_id: Joi.forbidden(),
  payoneer_id: Joi.forbidden(),
  payoneer_card_signup_status: Joi.forbidden(),
  payoneer_method: Joi.forbidden(),
  payoneer_signup_url: Joi.forbidden(),
  commission_type: Joi.forbidden(),
  commission_rate: Joi.forbidden(),
  program_referrer: Joi.forbidden(),
  sales_referrer: Joi.forbidden(),
  user_referrer: Joi.forbidden(),
  active: Joi.forbidden(),
  created: Joi.forbidden(),
  last_updated: Joi.forbidden(),
  givenName: Joi.forbidden(),
  familyName: Joi.forbidden(),
  dateOfBirth: Joi.forbidden(),
  given_name: Joi.forbidden(),
  family_name: Joi.forbidden(),
  date_of_birth: Joi.forbidden(),
  gender: Joi.forbidden(),
  twitter_screen_name: Joi.forbidden(),
  referral: Joi.forbidden(),
  last_pw_updated_date: Joi.forbidden(),
  card_pan_id: Joi.forbidden(),
  email_bounced: Joi.number().integer().max(1)
}).unknown(true);

const policyAcceptance = Joi.object().keys({
  policyId: common.id.required().description('ID of the policy the user is accepting')
});

var addFavorite = Joi.object().keys({
  merchant: common.id.required().description('GUID of the merchant to add to favorites for the authenticated user')
});

var removeFavorite = Joi.object().keys({
  merchant: common.id.required().description('GUID of the merchant to remove from favorites for the authenticated user')
});

// OUTGOING VALIDATIONS

var _pointHistory = Joi.object().keys({
  id: common.id,
  name: Joi.string().description('Name of the point object -- used to signify how the points were earned'),
  description: Joi.string().description('Brief displayable description of the points and how they were earned'),
  amount: Joi.number().integer().description('Number of points'),
  expiration: Joi.string().description('Timestamp when the points will expire')
});

var _balance = Joi.object().keys({
  pending: Joi.number().integer().description("Integer amount for user's pending cashback total in their preferred display currency"),
  available: Joi.number().integer().description("Integer amount for user's available cashback total in their preferred display currency"),
  total: Joi.number().integer().description("Integer amount for user's pending+available cashback in their preferred display currency")
});

var _balanceLocalized = Joi.object().keys({
  pending: Joi.string().description("Display-friendly localized string for user's pending cashback total in their preferred display currency"),
  available: Joi.string().description("Display-friendly localized string for user's available cashback total in their preferred display currency"),
  total: Joi.string().description("Display-friendly localized string for user's pending+available cashback in their preferred display currency")
});

var userViewModel = Joi.object().keys({
  id: common.id,
  whitelabel: common.whitelabel,
  name: Joi.string().description('Displayable name of the user -- akin to username rather than given/family name'),
  slug: Joi.string().description('Resource slug intended to be used for a human-readable semantic URL for the user'),
  description: Joi.string().description('Brief description of the user'),
  email: Joi.string().description("User's email address"),
  phone: Joi.string().description("User's phone number"),
  commissionType: Joi.string().valid('flat', 'percentage').insensitive().description("String representing whether the user's commission type is a flat referral fee or based on percentage of cashback"),
  commissionRate: Joi.number().description('The referral rate for percentage commission users'),
  givenName: Joi.string().description('Given name of the user'),
  familyName: Joi.string().description('Family name of the user'),
  dateOfBirth: Joi.string().description("User's date of birth"),
  gender: Joi.string(),
  last_pw_updated_date: Joi.string().description('Last day that the password has changed'),
  card_pan_id: Joi.string().description('PAN CARD ID for India User only'),
  member_id: Joi.string().description("User's member Id from ICC"),
  partner_id: Joi.string().description("User's partner (bank name) from ICC"),
  payoneer_payee_id: Joi.string().description("User's Payee Id"),
  payoneer_id: Joi.string().description("User's payoneer_id"),
  payoneer_card_signup_status: Joi.string().description("User's Payoneer card signup status"),
  payoneer_method: Joi.number().integer().description("User's Payoneer method GBT or Master Card"),
  payoneer_signup_url: Joi.string().description("User's payoneer_signup_url"),
  language: Joi.string().lowercase().description("ISO 639-1 two letter language code representing the user's preferred language if chosen -- currently defaults to 'en'"),
  region: Joi.string().lowercase().max(2).description("ISO 3166-1 alpha-2 country code representing the user's preferred region for merchants -- currently defaults to 'us'"),
  regionChanged: Joi.number().integer().max(1).description('RegionChanged flag which is represented as a tinyint -- only possible values should be 0 or 1'),
  newsLetterFollowed: Joi.number().integer().max(1).description('newsLetterFollowed flag which is represented as a tinyint -- only possible values should be 0 or 1'),
  currency: Joi.string().lowercase().description("ISO 4217 three letter currency code representing the user's preferred currency for display on the website -- currently defaults to 'usd'"),
  pointTotal: Joi.number().integer().description("User's current point total used for calculating custom cashback rates"),
  pointHistory: Joi.array().items(_pointHistory).description("Contains recent events which contributed to the user's point total"),
  balance: _balance.description("Account balances as integers -- note that transactions in other currencies will be converted to the user's preferred currency and summed"),
  balanceLocalized: _balanceLocalized.description('Localized account balances to be used for display only'),
  favoriteMerchants: Joi.array().items(common.id).description('An array of the merchant IDs which have been favorited by the user'),
  signUpDate: Joi.string().max(255),
  signUpIP: Joi.string().max(255),
  email_bounced: Joi.number().integer().max(1),
  accounts: Joi.object().keys({
    facebook: Joi.object().keys({
      id: Joi.string().description('Facebook Id'),
      name: Joi.string().description('Facebook Screen Name'),
      email: Joi.string().description('Facebook Email'),
      givenName: Joi.string().description('Facebook First Name'),
      familyName: Joi.string().description('Facebook Last Name')
    }),
    twitter: Joi.object().keys({
      id: Joi.string().description('Twitter Id'),
      name: Joi.string().description('Twitter Screen Name')
    }),
    google: Joi.object().keys({
      id: Joi.string().description('Google Id'),
      name: Joi.string().description('Google Screen Name'),
      email: Joi.string().description('Google Email'),
      givenName: Joi.string().description('Google Given Name'),
      familyName: Joi.string().description('Google Family Name')
    })
  })
});

var paymentMethodViewModel = Joi.object().keys({
  id: common.id,
  name: Joi.string().description('User-assignable name of the payment method to allow easier easier navation (e.g. Chase Card or Wells Fargo Acct'),
  type: Joi.string().description('Type of payment method'),
  bankName: Joi.string().description('Human readable bank name (if applicable)'),
  last4: Joi.string().description('Last 4 digits of a credit or debit card (if applicable)')
}).unknown(true);

var modViewModel = Joi.object().keys({
  id: common.id,
  name: Joi.string().description('Displayable name of the mod'),
  type: Joi.string().valid('incremental', 'multiplier').description('Incremental are flat cashback bonuses, while multipliers affect in a percentage-based fashion'),
  expiration: Joi.string().description('Expiration date of the mod'),
  usesRemaining: Joi.number().integer().description('Number of remaining usages for this mod'),
  vip: Joi.boolean().description('Whether or not the mod is currently in the VIP package'),
  merchant: Joi.alternatives().try(Joi.string().valid('ALL'), merchants.merchantViewModel).description("String representing whether the user's commission type is a flat referral fee or based on percentage of cashback")
}).unknown(true);

var redeemableViewModel = Joi.object().keys({
  id: common.id,
  type: Joi.string(),
  name: Joi.string(),
  description: Joi.string(),
  grantOnVip: Joi.boolean()
}).unknown(true);

var redeemedViewModel = Joi.object().keys({
  id: common.id,
  type: Joi.string(),
  name: Joi.string(),
  description: Joi.string(),
  code1: Joi.string(),
  code2: Joi.string(),
  redeemedDate: Joi.string(),
  grantOnVip: Joi.boolean()
}).unknown(true);

var userViewModelOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  users: Joi.array().items(userViewModel).description('An array of user objects')
});

var referralsOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  referrals: Joi.object().keys({
    whitelabel: common.whitelabel,
    commissionType: Joi.string().valid('flat', 'percentage').insensitive().description("String representing whether the user's commission type is a flat referral fee or based on percentage of cashback"),
    commissionRate: Joi.number(),
    referralCount: Joi.number().description('Count of direct referrals of this user'),
    totalCommissions: Joi.object().keys({
      currency: Joi.string(),
      value: Joi.string()
    }).description('Summation of commission info'),
    links: Joi.array().items(Joi.object().keys({
      id: common.id,
      name: Joi.string(),
      description: Joi.string(),
      click_count: Joi.number(),
      registered: Joi.number(),
      params: Joi.object().unknown(true),
      commissions: Joi.object().keys({
        sum: Joi.object().keys({
          currency: Joi.string(),
          value: Joi.string()
        })
      }).unknown(true)
    }))
  }).unknown(true),
  shareLinks: Joi.array()
});

var referralOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  referral: Joi.object().keys({
    id: common.id,
    whitelabel: common.whitelabel,
    name: Joi.string(),
    description: Joi.string(),
    params: Joi.object().unknown(true),
    commissionType: Joi.string().valid('flat', 'percentage').insensitive().description("String representing whether the user's commission type is a flat referral fee or based on percentage of cashback"),
    commissionRate: Joi.number().description('The referral rate for percentage commission users'),
    create: Joi.date().iso().description("Date that the referral link was created"),
    click_count: Joi.number().integer().description('Count of clicks on this link'),
    registered: Joi.number().integer().description('Count of the number of direct referrals for this link'),
    transactions: Joi.number().integer().description('Count of transaction from driect referrals of this link'),
    vipPurchases: Joi.number().integer().description('Count of vip purchases from driect referrals of this link'),
    receivedCashback: Joi.number(),
    commissions: Joi.array().items(Joi.object().keys({
      currency: Joi.string(),
      value: Joi.string()
    })).description('List of commission transactions'),
    totalCommissions: Joi.object().keys({
      currency: Joi.string(),
      value: Joi.string()
    }).description('Summation of commission info')
  }).unknown(true)
});

var referralById = Joi.object().keys({
  id: common.id.required()
});

const accessTokenForClient = Joi.object().keys({
  userId: common.id.required(),
  client: Joi.string().valid('coinbase', 'dwolla').required().description('Clients that store access tokens for retrieval')
});

var paymentMethodOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  paymentMethods: Joi.array().items(paymentMethodViewModel).description('An array of payment methods')
});

var vipOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  mods: Joi.array().items(modViewModel).description('An array of mods'),
  redeemable: Joi.array().items(redeemableViewModel),
  redeemed: Joi.array().items(redeemedViewModel)
});

var billingAddress = Joi.object().keys({
  first_name: Joi.string(),
  last_name: Joi.string(),
  address_line1: Joi.string(),
  address_line2: Joi.string(),
  city: Joi.string(),
  state: Joi.string(),
  zip: Joi.string(),
  country: Joi.string()
});

module.exports = {
  patch: patch,
  uiPrefs: uiPrefs,
  addFavorite: addFavorite,
  removeFavorite: removeFavorite,
  userViewModelOutput: userViewModelOutput,
  referralOutput: referralOutput,
  referralsOutput: referralsOutput,
  referralById: referralById,
  paymentMethodOutput: paymentMethodOutput,
  vipOutput: vipOutput,
  accessTokenForClient: accessTokenForClient,
  policyAcceptance: policyAcceptance,
  billingAddress: billingAddress
};
