'use strict';

var Joi = require('joi');
const common = require('../common');

// INPUT VALIDATIONS

var getShoppingEventById = Joi.object().keys({
  id: common.id.required()
});

var getShoppingEventBySlug = Joi.object().keys({
  slug: common.slug.required()
});

var getShoppingEventBySlugQuery = Joi.object().keys({
  language: common.lang.required(),
  region: common.region.required()
});

// OUTPUT VALIDATIONS

var _shoppingEventAssets = Joi.object().keys({
  bannerWide: common.asset.description("Asset object which holds information for the event's banner image"),
  bannerEmail: common.asset.description("Asset object which holds information for the event's email banner image"),
  bannerMobile: common.asset.description("Asset object which holds information for the event's mobile banner image"),
  bannerEnvironment: common.asset.description("Asset object which holds information for the event's environment banner image"),
  collectionCard: common.asset.description("Asset object which holds information for the event's collection card image"),
  socialShare: common.asset.description("Asset object which holds information for the event's social share image"),
  twitterHeader: common.asset.description("Asset object which holds information for the event's Twitter header image"),
  facebookCover: common.asset.description("Asset object which holds information for the event's Facebook cover image")
});

var shoppingEventViewModel = Joi.object().keys({
  id: common.id,
  name: Joi.string().description('Displayable name of the event'),
  slug: Joi.string().description('Resource slug intended to be used for a human-readable semantic URL for the event'),
  parentSlug: Joi.string(),
  description: Joi.string().description('Brief description of the event'),
  siteUrl: Joi.string().description("The whitelabel-specific URL to view this event's website"),
  // TODO: figure out these datetime validations
  warmDate: Joi.any(),
  activeDate: Joi.any(),
  closingDate: Joi.any(),
  closedDate: Joi.any(),
  isWarm: Joi.boolean(),
  isActive: Joi.boolean(),
  isClosing: Joi.boolean(),
  isClosed: Joi.boolean(),
  details: Joi.string(),
  seoTitle: Joi.string(),
  seoKeywords: Joi.string(),
  displayMainTitle: Joi.string(),
  displaySubTitle: Joi.string(),
  facebookShareText: Joi.string(),
  facebookPostText: Joi.string(),
  facebookDirectText: Joi.string(),
  twitterShareText: Joi.string(),
  twitterPostText: Joi.string(),
  twitterDirectText: Joi.string(),
  assets: _shoppingEventAssets.description('An object holding all of the available image asset objects and their details')
}).unknown(true);

var shoppingEventViewModelOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  events: Joi.array().items(shoppingEventViewModel).description('An array of shopping event objects')
});

module.exports = {
  getShoppingEventById: getShoppingEventById,
  getShoppingEventBySlug: getShoppingEventBySlug,
  getShoppingEventBySlugQuery: getShoppingEventBySlugQuery,
  shoppingEventViewModelOutput: shoppingEventViewModelOutput
};
