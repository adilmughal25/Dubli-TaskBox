'use strict';

var Joi = require('joi');
const common = require('../common');
const cashback = require('./cashbackApi');
const category = require('./categoryApi');
const deal = require('./dealApi');

// INCOMING VALIDATIONS

var getMerchantById = Joi.object().keys({
  id: common.id.required(),
  is_lounge_merchant: Joi.number().integer().min(0).description('flag for lounge merchant')
});

var getMerchantBySlug = Joi.object().keys({
  slug: common.slug.required(),
  is_lounge_merchant: Joi.number().integer().min(0).description('flag for lounge merchant')
});

var getMerchantBySlugQuery = Joi.object().keys({
  language: common.lang.required(),
  region: common.region.required(),
  is_lounge_merchant: Joi.number().integer().min(0).description('flag for lounge merchant')
});

var getMerchantListQuery = Joi.object().keys({
  limit: Joi.number().integer().max(100).description('The maximum amount of merchants to return -- default is 25 if no parameter is sent'),
  offset: Joi.number().integer().description('Number of merchant records to skip when creating a list (used for pagination) -- default is 0 if no parameter is sent'),
  region: Joi.string().lowercase().max(2).description('ISO 3166-1 alpha-2 country code -- will only return merchants who offer cashback rewards in this region'),
  language: Joi.string().lowercase().max(2),
  isNationalStore: Joi.boolean().description('If true, the response will contain merchants which is in the same country as the user'),
  isHighestCashbackOrder: Joi.boolean().description('If true, the response will contain merchants in highest cash back rate first order'),
  hasFlat: Joi.boolean().description('If true, the response will contain merchants in highest cash back rate first order includes ones with flat rates'),
  hasPercentage: Joi.boolean().description('If true, the response will contain merchants in highest cash back rate first order includes ones with percentage rates'),
  isFavStore: Joi.boolean().description('If true, the response will contain merchants which the user has added to their favorites'),
  userId: common.id,
  userRegion: Joi.string().lowercase().max(2).description('ISO 3166-1 alpha-2 country code for the region which the user is in'),
  event: Joi.string().description('GUID for a shopping event -- will only return merchants who are part of this event'),
  category: Joi.string().description('GUID for a category -- will only return merchants who are part of this category'),
  favOnly: Joi.boolean().description('If true, the response will only contain merchants which the user has added to their favorites'),
  excludeFavs: Joi.boolean().description('If true, the response will not contain any merchants which the user had added to their favorites'),
  is_lounge_merchant: Joi.number().integer().min(0).description('flag for lounge merchant'),
  nameFragment: Joi.string().description('name fragment of the merchant details -- will only return merchants who are part of this category')
}).unknown(true);

// OUTGOING VALIDATIONS

var _merchantAssets = Joi.object().keys({
  logo: common.asset.description("Asset object which holds information for the merchant's logo image"),
  cover: common.asset.description("Asset object which holds information for the merchant's cover image"),
  hero: common.asset.description("Asset object which holds information for the merchant's hero image")
});

var merchantViewModel = Joi.object().keys({
  id: common.id,
  name: Joi.string().description('Displayable name of the merchant'),
  url: Joi.string().description('Ominto API URL which serves as the redirect link for this merchant'),
  displayUrl: Joi.string().description('URL which can be used for display purposes, but links should follow the url property'),
  siteUrl: Joi.string().description("The whitelabel-specific URL to view this merchant's website"),
  slug: Joi.string().description('Resource slug intended to be used for a human-readable semantic URL for the merchant'),
  description: Joi.string().description('Brief description of the merchant and their goods/services'),
  details: Joi.string(),
  seoTitle: Joi.string(),
  seoKeywords: Joi.string(),
  exceptions: Joi.string().description('Shopping exceptions and restrictions for this merchant'),
  cashback: Joi.string().description('Display-friendly string which represents the range of cashback percentages available to the user'),
  isPercentage: Joi.boolean(),
  vip_flat_commission: Joi.number().integer().description('VIP Flat Commission'),
  is_lounge_merchant: Joi.number().integer().min(0),
  cashbackTotal: Joi.number().integer().description('Total number of cashback rates available for the merchant'),
  cashbacks: Joi.array().items(cashback.cashbackSimpleModel).description('An array of all the available cashback rates'),
  dealsTotal: Joi.number().integer().description('Total number of deals available for the merchant'),
  deals: Joi.array().items(deal.dealSimpleModel).description('An array of all the available deals'),
  categories: Joi.array().items(category.categorySimpleModel).description('An array of all the categories which this merchant belongs to'),
  assets: _merchantAssets.description('An object holding all of the available image asset objects and their details'),
  region: Joi.string().max(2),
  lang: Joi.string().max(2),
  impressionTag: Joi.string().description('Tag(HTML) for the impression tracking for the merchant, if any'),
  show_reward: Joi.boolean(),
  is_plus_six_vip_applicable: Joi.number().integer(),
  // PERSONALIZED INFORMATION
  isFavorite: Joi.boolean().description('A boolean representing whether this merchant is a favorite of the currently authenticated user'),
  score: Joi.number().integer().description("The merchant's ranking score based on interactions from the currently authenticated user -- only available when getting a list of merchants"),
  reasons: Joi.array().items(Joi.string().description("An ordered array of all the internal metric types which contributed to the merchant's ranking score"))
});

var merchantViewModelOutput = Joi.object().keys({
  meta: Joi.object().unknown(true).description('A dynamic object containing metadata on the request/response'),
  merchants: Joi.array().items(merchantViewModel).description('An array of merchant objects')
});

module.exports = {
  getMerchantById: getMerchantById,
  getMerchantBySlug: getMerchantBySlug,
  getMerchantBySlugQuery: getMerchantBySlugQuery,
  getMerchantListQuery: getMerchantListQuery,
  merchantViewModelOutput: merchantViewModelOutput,
  merchantViewModel: merchantViewModel
};
