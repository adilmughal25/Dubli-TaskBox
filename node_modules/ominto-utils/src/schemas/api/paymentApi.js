'use strict';

const Joi = require('joi');

// INPUT VALIDATIONS

// TODO: routingNumber is required if country = 'us'
const _bankAccount = Joi.object().keys({
  accountNumber: Joi.string().max(255).required(),
  routingNumber: Joi.string().length(9),
  country: Joi.string().max(2).required(),
  bankName: Joi.string().max(255)
});

const _creditCard = Joi.object().keys({
  cardNumber: Joi.string().max(255).required(),
  expMonth: Joi.number().integer().positive().max(12).required(),
  expYear: Joi.number().integer().positive().max(3000).required(),
  securityCode: Joi.string().max(4).required(),
  fullName: Joi.string().max(255),
  addressLine1: Joi.string().max(255),
  addressLine2: Joi.string().max(255),
  addressCity: Joi.string().max(255),
  addressState: Joi.string().max(255),
  addressZip: Joi.string().max(40),
  addressCountry: Joi.string().max(40)
});

// TODO: will be very similar to credit card; might even be the same except Stripe only allows debit cards in the US
const _debitCard = Joi.object().keys({});

const _paypal = Joi.object().keys({
  email: Joi.string().email().max(255).description('Email address used to register a valid PayPal account'),
  paymentMethodId: Joi.number().integer().positive().description('Payment method id to associate to this payment')
}).xor('email', 'paymentMethodId');

const _novalnet = Joi.object().keys({
});

const _dwolla = Joi.object().keys({
});

const _infiPlanet = Joi.object().keys({
  points: Joi.number().integer().min(0).max(9999999999).required().description('This refers to the amount of infiPlanet points that will be used in this transaction'),
  description: Joi.string().max(255).description('This is a short and optional parameter to infiPlanet that will be attached as a description for the transaction').example('Order #1234 for VIP package')
});

const _payu = Joi.object().keys({
  desc: Joi.string().max(255).required(),
  first_name: Joi.string().max(255).required(),
  last_name: Joi.string().max(255).required(),
  email: Joi.string().email().required(),
  phone: Joi.number().max(999999999999999).integer()
});

const _bitcoin = Joi.object().keys({
  fromAccount: Joi.string().max(256),
  accessToken: Joi.string().max(255),
  paymentMethodId: Joi.number().integer().positive().description('Payment method id to associate to this payment')
}).xor('fromAccount', 'paymentMethodId');

const _stripe = Joi.object().keys({
  token: Joi.string().max(256),
  paymentMethodId: Joi.number().integer().positive().description('Payment method id to associate to this payment')
}).xor('token', 'paymentMethodId');

const _ominto = Joi.object().keys({});

const payment = Joi.object().keys({
  amount: Joi.number().integer().positive().allow(0).max(9999999999).description('Currency amount in the lowest subdivision of the currency, e.g. cents for USD'),
  currency: Joi.string().lowercase().max(3).required().description('ISO 4217 three letter currency code'),
  descriptor: Joi.string().max(255).description('Optional descriptor for the payment which will appear in a memo on bank / accounting statements'),
  paymentFor: Joi.string().max(255).description("Optional value to specify what the payment is for, will be associated to the outgoing payment, will be for things like 'VIP' '200 points' and such"),
  taxRate: Joi.number().positive().precision(2).less(100).description('Percentage value to charge for taxes on the given purchase'),
  coupon: Joi.string().max(255).description("Optional value to specify what the payment is for, will be associated to the outgoing payment, will be for things like 'VIP' '200 points' and such"),
  isAutorenewal: Joi.number().description('Optional value to indicate if Autorenewal is turned on or off'),
  autoRenewalType: Joi.string().max(255).description('Optional value to indicate if autoRenewalType is MONTHLY or YEARLY'),
  email: Joi.string().email().max(255).description('Optional value for the user email - using in mall web app'),
  bankAccount: _bankAccount,
  creditCard: _creditCard,
  debitCard: _debitCard,
  stripe: _stripe,
  novalnet: _novalnet,
  paypal: _paypal,
  dwolla: _dwolla,
  infiPlanet: _infiPlanet,
  payu: _payu,
  bitcoin: _bitcoin,
  ominto: _ominto
}).xor('bankAccount', 'creditCard', 'debitCard', 'stripe', 'paypal', 'dwolla', 'payu','novalnet', 'infiPlanet', 'bitcoin', 'ominto');

const executeSinglePaypalPayment = Joi.object().keys({
  paymentId: Joi.string().required(),
  PayerID: Joi.string().required()
}).unknown(true);

const paymentQuery = Joi.object().keys({
  redirect: Joi.string().description('Url to be set by frontend to redirect the user to after a successful paypal payment')
});

const previewPayment = Joi.object().keys({
  amount: Joi.number().positive().required().description('The initial amount for the charge'),
  taxRate: Joi.number().positive().allow(0).required().description('The tax rate that will be applied to the payment')
});

module.exports = {
  payment: payment,
  paymentQuery: paymentQuery,
  executeSinglePaypalPayment: executeSinglePaypalPayment,
  previewPayment: previewPayment
};
