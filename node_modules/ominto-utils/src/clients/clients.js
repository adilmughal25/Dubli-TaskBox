'use strict';

var configs;

var http = require('http');
http.globalAgent.keepAlive = true;
http.globalAgent.keepAliveMsecs = 60000;

var https = require('https');
https.globalAgent.keepAlive = true;
https.globalAgent.keepAliveMsecs = 60000;

function createGetter (client) {
  return function () {
    if (!this.client || client !== this.client) {
      var _configs = configs || global.configs || global.config;
      if (!_configs) {
        throw new Error("Client '" + client + "' is not initialized. " +
          'You must initialize clients or provide a global config object');
      }
      try {
        this.client = require('./' + client)(_configs);
      } catch (err) {
        throw new Error("Could not initialize client '" + client + "': " + err.stack);
      }
    }
    return this.client;
  };
}

function init (_configs) {
  configs = _configs;
}

module.exports = {
  init: init,
  getAccessCodesClient: createGetter('accessCode'),
  getCategoryClient: createGetter('category'),
  getCommunicationClient: createGetter('communication'),
  getCurrencyClient: createGetter('currency'),
  getDeviceClient: createGetter('device'),
  getFaqClient: createGetter('faq'),
  getKinesisClient: createGetter('kinesisEvent'),
  getMerchantClient: createGetter('merchant'),
  getModClient: createGetter('mod'),
  getOutclickClient: createGetter('outclick'),
  getMissingOrder: createGetter('orderinfo'),
  getEmailTrackerClient: createGetter('email_tracker'),
  getVipSubscriptionClient: createGetter('vipSubscription'),
  getMallClient: createGetter('mall'),
  getPageClient: createGetter('page'),
  getPaymentClient: createGetter('payment'),
  getPaymentGatewayClient: createGetter('paymentGateway'),
  getPaymentMethodClient: createGetter('paymentMethod'),
  getPointClient: createGetter('points'),
  getPolicyClient: createGetter('policy'),
  getRegionClient: createGetter('region'),
  getShareLinkClient: createGetter('shareLinks'),
  getShoppingEventClient: createGetter('shoppingEvent'),
  getSlugClient: createGetter('slugs'),
  getStringsClient: createGetter('strings'),
  getTransactionClient: createGetter('transaction'),
  getUserClient: createGetter('user'),
  getVoucherClient: createGetter('voucher')
};
