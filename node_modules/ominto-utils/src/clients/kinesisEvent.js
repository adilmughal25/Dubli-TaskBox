'use strict';

var _ = require('lodash');

let dataClient;

module.exports = function init (configs, data) {
  // allowing the dataclient to be injected here is just to avoid having to re-write
  // so many tests which rely on stubbing methods of the dataclient via sinon
  if (data) {
    dataClient = data;
  } else {
    dataClient = require('../utils').getDataClient(configs.data_api.internalUrl, configs.data_api.auth);
  }

  return {
    submitEvent: submitEvent,
    putEvent: putKinesisEventToDataService,
    putEventFromLambda: putKinesisEventFromLambdaHandler,
    putEventFromTaskbox: putKinesisEventFromTaskbox
  };
};

function * submitEvent (streamName, eventType, payload, flags, ctx) {
  var eventResponse = yield putKinesisEventToDataService(
    streamName,
    eventType,
    payload,
    flags,
    ctx.state.jwt,
    ctx.state.logger.fields.ip,
    ctx.state.logger.fields.req_id,
    ctx.state.logger.fields.session_id,
    ctx.state.logger.fields.method,
    ctx.state.logger.fields.path,
    ctx.state.logger.fields.querystring,
    null // TODO: need to figure out how to get the request body in here :-(
  );

  ctx.assert(eventResponse.statusCode === 202, 500, 'Failed to send kinesis event to data service', {
    res: eventResponse,
    streamName: streamName,
    eventType: eventType,
    payload: payload,
    flags: flags,
    internalCode: 350
  });
}

function * putKinesisEventToDataService (streamName, eventType, payload, flags, jwt, ip, reqId, sessionId, method, path, queryString, reqBody) {
  let a_trigger = require('../utils/create-envelope').createTrigger(ip, reqId, sessionId, method, path, queryString, reqBody);
  let envelope = require('../utils').createEnvelope(eventType, jwt, payload, flags, a_trigger);

  return yield dataClient.put({
    url: '/submitEvent/' + streamName + '/',
    headers: {
      'X-Request-Id': reqId,
      'X-Session-Id': sessionId
    },
    body: envelope
  });
}

function * putKinesisEventFromLambdaHandler (streamName, eventType, payload, flags, previousPayload, reqId, sessionId) {
  let a_trigger = require('../utils/create-envelope').createTriggerFromLambdaPayload(previousPayload.type, previousPayload.data, reqId, sessionId);
  if (previousPayload.trigger && _.isArray(previousPayload.trigger) && previousPayload.trigger.length > 1) {
    a_trigger.unshift(previousPayload.trigger);
  }
  let envelope = require('../utils').createEnvelope(eventType, previousPayload.jwt, payload, flags, a_trigger);

  return yield dataClient.put({
    url: '/submitEvent/' + streamName + '/',
    headers: {
      'X-Request-Id': reqId,
      'X-Session-Id': sessionId
    },
    body: envelope
  });
}

function * putKinesisEventFromTaskbox (streamName, eventType, payload, flags, taskName) {
  let a_trigger = require('../utils/create-envelope').createTriggerFromTaskbox(taskName);
  let envelope = require('../utils').createEnvelope(eventType, {}, payload, flags, a_trigger);
  return yield dataClient.put({
    url: '/submitEvent/' + streamName + '/',
    body: envelope
  });
}
