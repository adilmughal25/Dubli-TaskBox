'use strict';

const helpers = require('./helpers');
const qs = require('../utils/url').toQueryString;
let dataClient;

module.exports = function init (configs) {
  dataClient = require('../utils').getDataClient(configs.data_api.internalUrl, configs.data_api.auth);
  return {
    getVoucherByCode: getVoucherByCode,
    getVoucherByUserID: getVoucherByUserID,
    searchVouchers: searchVouchers,
    getVoucherBatch: getVoucherBatch,
    purchaseVouchers: purchaseVouchers,
    redeemVoucher: redeemVoucher,
    unredeemVoucher: unredeemVoucher,
    addVipPackageToUser: addVipPackageToUser
  };
};

function * getVoucherByCode (code, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getVoucherByCode/' + code + '/' + qs({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'Code not found');
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getVoucherByCode', {
    res: result,
    code: code,
    internalCode: 351
  });
  return result.body;
}

function * getVoucherByUserID (id, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getVoucherByUserID/' + id + '/' + qs({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'Code not found');
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getVoucherByUserID', {
    res: result,
    id: id,
    internalCode: 351
  });
  return result.body;
}

function * searchVouchers (purchaser, redeemed, redeemedTo, start, end, dateType, ctx) {
  var query = qs({purchaser: purchaser, redeemed_to: redeemedTo, redeemed: redeemed, start: start, end: end, dateType: dateType});
  let result = yield dataClient.get(helpers.setRequestPayload('/searchVouchers/' + query, ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during searchVouchers', {
    res: result,
    purchaser: purchaser,
    redeemed: redeemed,
    redeemedTo: redeemedTo,
    start: start,
    end: end,
    dateType: dateType,
    internalCode: 351
  });
  return result.body;
}

function * getVoucherBatch (startId, purchaser, limit, ctx) {
  var query = qs({startId: startId, purchaser: purchaser, limit: limit});
  let result = yield dataClient.get(helpers.setRequestPayload('/getVoucherBatch/' + query, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'No codes found');
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getVoucherBatch', {
    res: result,
    startId: startId,
    purchaser: purchaser,
    limit: limit,
    internalCode: 351
  });
  return result.body;
}

function * purchaseVouchers (amount, purchaser, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/purchaseVouchers/', ctx, {
    amount: amount,
    purchaser: purchaser
  }));
  ctx.assert(result.statusCode !== 404, 404, 'Code not found');
  ctx.assert(result.statusCode === 201, 500, 'Unexpected result from data service during purchaseVouchers', {
    res: result,
    amount: amount,
    purchaser: purchaser,
    internalCode: 351
  });
  return result.body.id;
}

function * redeemVoucher (userId, code, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/redeemVoucher/', ctx, {userId: userId, code: code}));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during redeemVoucher', {
    res: result,
    userId: userId,
    code: code,
    internalCode: 351
  });
  return result.body.vouchersRedeemed;
}

function * unredeemVoucher (code, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/unredeemVoucher/', ctx, {code: code}));
  ctx.assert(result.statusCode !== 404, 404, 'Code not found');
  ctx.assert(result.statusCode === 204, 500, 'Unexpected result from data service during unredeemVoucher', {
    res: result,
    code: code,
    internalCode: 351
  });
}

function * addVipPackageToUser (userId, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/addVipPackageToUser/' + userId + '/', ctx));
  return result;
}
