'use strict';

//const toQueryString = require('../utils/url').toQueryString;
const helpers = require('./helpers');

let dataClient;

module.exports = function init (configs) {
  dataClient = require('../utils').getDataClient(configs.data_api.internalUrl, configs.data_api.auth);
  return {
    getVipSubscriptionPlanByUser: getVipSubscriptionPlanByUser,
    getVipSubscriptionPlanByIdAndGateway: getVipSubscriptionPlanByIdAndGateway,
    patchVipSubscriptionStatus: patchVipSubscriptionStatus,
    createVipSubscription: createVipSubscription
  };
};

function * getVipSubscriptionPlanByUser (userId, bypassCache, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/getVipSubscriptionPlanByUser/', ctx, {
    userId: userId
  }));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getVipSubscriptionPlanByUser', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * patchVipSubscriptionStatus (vipSubscriptionPlanId, state, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/patchVipSubscriptionStatus/' + vipSubscriptionPlanId, ctx, {
    state: state
  }));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during patchVipSubscription', {
    res: result,
    vipSubscriptionPlanId: vipSubscriptionPlanId,
    internalCode: 351
  });
  return result.body;
}

function * getVipSubscriptionPlanByIdAndGateway (id, gateway, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getVipSubscriptionPlanByIdAndGateway/' + id + '/' + gateway, ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getVipSubscriptionPlanByIdAndGateway', {
    res: result,
    id: id,
    internalCode: 351
  });
  return result.body;
}

function * createVipSubscription (userId, subscription_plan_id, gateway, state, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/createVipSubscription/', ctx, {
    userId: userId,
    subscription_plan_id: subscription_plan_id,
    gateway: gateway,
    state: state
  }));

  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during create VIP Subscription', {
    res: result,
    subscription_plan_id: subscription_plan_id,
    internalCode: 351
  });
  return result.body;
}
