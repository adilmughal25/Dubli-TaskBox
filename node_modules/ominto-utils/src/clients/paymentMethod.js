'use strict';

const _ = require('lodash');
let dataClient;

function * getPaymentMethodById (paymentMethodId, ctx) {
  let result = yield dataClient.get('/getPaymentMethodById/' + paymentMethodId + '/', null, ctx);
  ctx.assert(result.statusCode !== 404, 404, 'Payment method not found', {
    res: result,
    paymentMethodId: paymentMethodId,
    internalCode: 275
  });
  return result.body;
}

function * getPaymentMethodByIdForUserAndGateway (userId, paymentMethodId, gateway, ctx) {
  let result = yield dataClient.get('/getPaymentMethodByIdForUserAndGateway/' + userId + '/' + paymentMethodId + '/' + gateway + '/', null, ctx);
  if (result.statusCode === 404) {
    return false;
  }
  return result.body;
}

function * getPaymentMethodsForUser (userId, direction, ctx) {
  let result = yield dataClient.get('/getPaymentMethodsForUser/' + userId + '/' + direction + '/', null, ctx);
  return result.body;
}

// TODO: unused?
function * getPaymentMethodIdsForUser (userId, ctx) {
  let result = yield dataClient.get('/getPaymentMethodIdsForUser/' + userId + '/', null, ctx);
  return _.values(_.mapValues(result.body, 'id'));
}

// TODO: unused?
function * getPaymentMethodIdsForUserByGateway (userId, gateway, ctx) {
  let result = yield dataClient.get('/getPaymentMethodIdsForUserByGateway/' + userId + '/', {gateway: gateway}, ctx);
  return _.values(_.mapValues(result.body, 'id'));
}

function * createPaymentMethod (payload, ctx) {
  let result = yield dataClient.post('/createPaymentMethod/', payload, null, ctx);
  return result.body;
}

function * removePaymentMethod (payload, ctx) {
  let result = yield dataClient.post('/removePaymentMethod/', payload, null, ctx);
  return result.body;
}

function * getPaymentMethodByGatewayIdForUserAndGateway (userId, gatewayId, gateway, ctx) {
  let result = yield dataClient.get('/getPaymentMethodByGatewayIdForUserAndGateway/' + userId + '/' + gatewayId + '/' + gateway + '/', null, ctx);
  if (result.statusCode === 404) {
    return false;
  }
  return result.body;
}

let createPaymentMethodPayload = (gateway, direction) => {
  return function (userId, description, type, gatewayId, currency, metadata) {
    let basePaymentMethod = {
      user_id: userId,
      name: _.startCase(gateway),
      description: description,
      type: type,
      direction: direction,
      gateway: gateway,
      gateway_id: gatewayId,
      currency: currency
    };
    return _.merge(basePaymentMethod, metadata);
  };
};

let createPaypalPaymentMethodPayload = createPaymentMethodPayload('paypal', 'all');
let createStripePaymentMethodPayload = createPaymentMethodPayload('stripe', 'in');
let createStripeWithdrawalMethodPayload = createPaymentMethodPayload('stripe', 'out');
let createDwollaPaymentMethodPayload = createPaymentMethodPayload('dwolla', 'all');
let createPayoneerPaymentMethodPayload = createPaymentMethodPayload('payoneer', 'out');
let createCoinbasePaymentMethodPayload = createPaymentMethodPayload('coinbase', 'all');
let createPayTMPaymentMethodPayload = createPaymentMethodPayload('paytm', 'all');

function * getPaymentMethodByGatewayId (gatewayId, ctx) {
  let result = yield dataClient.get('/getPaymentMethodByGatewayId/' + gatewayId + '/', null, ctx);
  if (result.statusCode === 404) {
    return false;
  }
  return result.body;
}

module.exports = function init (config) {
  dataClient = require('../utils/rest-client')(config.data_api, false);
  return {
    getPaymentMethodById: getPaymentMethodById,
    getPaymentMethodsForUser: getPaymentMethodsForUser,
    getPaymentMethodIdsForUser: getPaymentMethodIdsForUser,
    getPaymentMethodIdsForUserByGateway: getPaymentMethodIdsForUserByGateway,
    createPaymentMethod: createPaymentMethod,
    removePaymentMethod: removePaymentMethod,
    createPaymentMethodPayload: createPaymentMethodPayload,
    getPaymentMethodByGatewayId: getPaymentMethodByGatewayId,
    getPaymentMethodByIdForUserAndGateway: getPaymentMethodByIdForUserAndGateway,
    createPaypalPaymentMethodPayload: createPaypalPaymentMethodPayload,
    createStripePaymentMethodPayload: createStripePaymentMethodPayload,
    createStripeWithdrawalMethodPayload: createStripeWithdrawalMethodPayload,
    createDwollaPaymentMethodPayload: createDwollaPaymentMethodPayload,
    createPayoneerPaymentMethodPayload: createPayoneerPaymentMethodPayload,
    createCoinbasePaymentMethodPayload: createCoinbasePaymentMethodPayload,
    createPayTMPaymentMethodPayload: createPayTMPaymentMethodPayload,
    getPaymentMethodByGatewayIdForUserAndGateway: getPaymentMethodByGatewayIdForUserAndGateway
  };
};
