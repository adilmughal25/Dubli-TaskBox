'use strict';

let dataClient;

function * getPaymentBySourcePaymentId (sourceId, bypassCache, ctx) {
  let result = yield dataClient.get('/getPaymentBySourcePaymentId/' + sourceId + '/', {bypass: bypassCache}, ctx);
  if (result.statusCode === 404) {
    return null;
  }
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPaymentBySourcePaymentId', {
    res: result,
    sourceId: sourceId,
    internalCode: 351
  });
  return result.body;
}

function * getPaymentsForUser (userId, bypassCache, ctx) {
  let result = yield dataClient.get('/getPaymentsForUser/' + userId + '/', {bypass: bypassCache}, ctx);
  if (result.statusCode === 404) {
    return null;
  }
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPaymentsForUser', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * getAvailablePaymentOptions (region, currency, bypassCache, ctx) {
  let result = yield dataClient.get('/getAvailablePaymentOptions/' + region + '/' + currency +'/', {bypass: bypassCache}, ctx);
  if (result.statusCode === 404) {
    return null;
  }
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getAvailablePaymentOptions', {
    res: result,
    region: region,
    currency: currency,
    internalCode: 351
  });
  return result.body;
}

function* getPaymentStatusById(id, ctx) {
  let result = yield dataClient.get('/getPaymentById/' + id + '/', { bypass: true }, ctx);
  if (result.statusCode === 404) {
    return null;
  }
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPaymentStatusById', {
    res: result,
    internalCode: 351
  });
  return result.body.status;
}

module.exports = function init (config) {
  dataClient = require('../utils/rest-client')(config.data_api, false);
  return {
    getPaymentBySourcePaymentId: getPaymentBySourcePaymentId,
    getPaymentStatusById: getPaymentStatusById,
    getPaymentsForUser: getPaymentsForUser,
    getAvailablePaymentOptions: getAvailablePaymentOptions
  };
};
