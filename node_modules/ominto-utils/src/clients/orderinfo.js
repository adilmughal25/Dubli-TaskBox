'use strict';

//const toQueryString = require('../utils/url').toQueryString;
const helpers = require('./helpers');

let dataClient;

module.exports = function init (configs) {
  dataClient = require('../utils').getDataClient(configs.data_api.internalUrl, configs.data_api.auth);
  return {
    getMissingOrders: getMissingOrders,
    getMissingOrderById: getMissingOrderById,
    createMissingOrder: createMissingOrder,
    cancelMissingPurchase: cancelMissingPurchase
  };
};

function * getMissingOrders (userId, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getMissingOrderInfo/', ctx, {
    userId: userId
  }));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getMissingOrders', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * getMissingOrderById (id, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getMissingOrderInfoById/' + id, ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getMissingOrderById', {
    res: result,
    id: id,
    internalCode: 351
  });
  return result.body;
}


function * createMissingOrder (email, userId, name_of_the_store, order_date, order_id, region, order_amount, currency, login_before_purchase,  coupon_during_checkout, uploadUrl, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/insertMissingOrderInfo/', ctx, {
    email: email,
    user_id: userId,
    name_of_the_store: name_of_the_store,
    order_date: order_date,
    order_id: order_id,
    region: region,
    order_amount: order_amount,
    currency: currency,
    login_before_purchase: login_before_purchase,
    coupon_during_checkout: coupon_during_checkout,
    uploadUrl: uploadUrl
  }));
  ctx.assert(result.statusCode !== 400, 400, 'Sorry, but the order ID you entered has already been submitted to us.', {
    orderId: order_id,
    email: email,
    name_of_the_store: name_of_the_store
  });
  ctx.assert(result.statusCode !== 404, 404, 'Missing Order info not found', {
    orderId: order_id,
    user_id: userId
  });
  if (result.body && result.body.code === 'ER_DUP_ENTRY') {
    ctx.throw(409, 'Missing Order info entry already exists for this outclick.', {
      duplicateKey: true,
      duplicateMsg: result.body.message
    });
  }
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during create Missing Order info', {
    res: result,
    orderId: order_id,
    internalCode: 351
  });
  return result.body;
}

function * cancelMissingPurchase(id, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/cancelMissingPurchase/', ctx, {
    id: id
  }));
  ctx.assert(result.statusCode !== 400, 400, 'Sorry, There was an error.', {
    id: id
  });
  return result.body;
}
