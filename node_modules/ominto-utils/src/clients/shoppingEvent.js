'use strict';

let dataClient;

function * getShoppingEventById (shoppingEventId, ctx) {
  let result = yield dataClient.get('/getShoppingEventById/' + shoppingEventId + '/', null, ctx);
  ctx.assert(result.statusCode !== 404, 404, 'Shopping event not found');
  return result.body;
}

function * getShoppingEventBySlug (slug, lang, region, ctx) {
  let result = yield dataClient.get('/getShoppingEventBySlug/' + slug + '/', {lang: lang, region: region}, ctx);
  ctx.assert(result.statusCode !== 404, 404, 'Shopping event not found');
  return result.body;
}

function * getShoppingEvents (region, language, ctx) {
  let result = yield dataClient.get('/getShoppingEvents/', {region: region, language: language}, ctx);
  ctx.assert(result.statusCode !== 404, 404, 'No events found');
  return result.body;
}

function * getMerchantsForEvent (shoppingEventId, ctx) {
  let result = yield dataClient.get('/getMerchantsForShoppingEvent/' + shoppingEventId + '/', null, ctx);
  return result.body;
}

function * getContentForShoppingEvent (shoppingEventId, merchantPerCategoryLimit, ctx) {
  let result = yield dataClient.get('/getContentForShoppingEvent/' + shoppingEventId + '/', {
    withMerchants: true,
    limit: merchantPerCategoryLimit
  }, ctx);
  return result.body;
}

function * getContentForShoppingEventBySlug (slug, lang, region, merchantPerCategoryLimit, ctx) {
  let result = yield dataClient.get('/getContentForShoppingEventBySlug/' + slug + '/', {
    lang: lang,
    region: region,
    limit: merchantPerCategoryLimit
  }, ctx);
  return result.body;
}

module.exports = function init (config) {
  dataClient = require('../utils/rest-client')(config.data_api, false);
  return {
    getShoppingEventById: getShoppingEventById,
    getShoppingEventBySlug: getShoppingEventBySlug,
    getShoppingEvents: getShoppingEvents,
    getMerchantsForEvent: getMerchantsForEvent,
    getContentForShoppingEvent: getContentForShoppingEvent,
    getContentForShoppingEventBySlug: getContentForShoppingEventBySlug
  };
};
