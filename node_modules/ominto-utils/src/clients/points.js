'use strict';

const toQueryString = require('../utils/url').toQueryString;
const _ = require('lodash');
const helpers = require('./helpers');
const currency = require('../utils/currency');
const Decimal = require('decimal');
const USD = 'usd';

let dataClient, pointsMultiplier, perTransactionPointCap, defaultPointsLifetime;

module.exports = function init (configs) {
  dataClient = require('../utils').getDataClient(configs.data_api.internalUrl, configs.data_api.auth);
  pointsMultiplier = configs.points.multiplier;
  perTransactionPointCap = configs.points.transactionCap;
  defaultPointsLifetime = configs.points.defaultLifetimeInSeconds;
  return {
    getAvailableBoosts: getAvailableBoosts,
    incrementPointsForUser: incrementPoints,
    decrementPointsForUser: decrementPoints,
    updateUserPointsItem: updateUserPointsItem,
    removeUserPointsItem: removeUserPointsItem,
    getPointsForUser: getPointsForUser,
    getPointsBalanceForUser: getPointsBalanceForUser,
    getPointsValueFromAmountAndCurrency: getPointsValueFromAmountAndCurrency,
    applyBoostToUser: applyBoostToUser
  };
};

const setHeaders = (reqId, sessionId) => ({
  'X-Request-Id': reqId,
  'X-Session-Id': sessionId
});

const setRequestPayload = (url, reqId, sessionId, payload) => payload ? {
  url: url,
  headers: setHeaders(reqId, sessionId),
  body: payload
} : {
  url: url,
  headers: setHeaders(reqId, sessionId)
};

const dataGet = url => {
  return function (reqId, sessionId) {
    return dataClient.get(setRequestPayload(url, reqId, sessionId));
  };
};

const dataPost = url => {
  return function (payload, reqId, sessionId) {
    return dataClient.post(setRequestPayload(url, reqId, sessionId, payload));
  };
};

const sanitizeObject = objectToSanitize => _(objectToSanitize).omit(_.isUndefined).omit(_.isNull).value();

const capPoints = pointsObject => {
  if (pointsObject.amount > perTransactionPointCap) {
    pointsObject.amount = perTransactionPointCap;
    return pointsObject;
  } else {
    return pointsObject;
  }
};

const constructPoints = pointData => {
  return sanitizeObject({
    amount: pointData.amount,
    name: pointData.name || null,
    description: pointData.description || null,
    lifetime_in_seconds: pointData.lifetime_in_seconds || defaultPointsLifetime
  });
};

const constructUserPoints = (userId, pointsId, expirationDate) => ({
  user_id: userId,
  points_id: pointsId,
  expiration: expirationDate
});

const getExpirationDate = secondsToConvert => {
  let now = new Date();
  now.setSeconds(now.getSeconds() + secondsToConvert);
  return now.toISOString();
};

function * getAvailableBoosts (ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getBoosts/', ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getAvailableBoosts', {
    res: result,
    internalCode: 351
  });
  return result.body;
}

function * incrementPoints (userId, pointData, reqId, sessionId) {
  let pointsObject = capPoints(constructPoints(pointData));
  let points = yield dataPost('/createPoints/')(pointsObject, reqId, sessionId);
  if (points.statusCode !== 201) {
    throw new Error('Failed to create Points : ' + JSON.stringify(points.body));
  }

  let userPointsObject = constructUserPoints(userId, points.body.id, getExpirationDate(pointsObject.lifetime_in_seconds));
  let userPoints = yield dataPost('/createUserPoints/')(userPointsObject, reqId, sessionId);

  return {
    points: {
      statusCode: points.statusCode,
      body: points.body
    },
    userPoints: {
      statusCode: userPoints.statusCode,
      body: userPoints.body
    }
  };
}

function * decrementPoints (userId, payload, reqId, sessionId) {
  payload.amount = -Math.abs(payload.amount);
  return yield incrementPoints(userId, payload, reqId, sessionId);
}

function * applyBoostToUser (user, boost, reqId, sessionId) {
  return yield dataPost('/addPointsToUser/')({
    user: user,
    boost: boost
  }, reqId, sessionId);
}

function * getPointsForUser (userId, reqId, sessionId) {
  let qs = toQueryString({
    bypass: true
  });
  return yield dataGet('/getUserPoints/' + userId + '/' + qs)(reqId, sessionId);
}

function * getPointsBalanceForUser (userId, reqId, sessionId) {
  let qs = toQueryString({
    bypass: true
  });
  return yield dataGet('/getUserPointsBalance/' + userId + '/' + qs)(reqId, sessionId);
}

function * getPointsValueFromAmountAndCurrency (amount, fromCurrency, ctx) {
  let amountInDollars;
  if (fromCurrency.toLowerCase() === USD) {
    amountInDollars = amount;
  } else {
    amountInDollars = yield currency.convertCurrency(amount, fromCurrency, USD, ctx);
  }
  return Decimal(amountInDollars).mul(pointsMultiplier).toNumber();
}

function * updateUserPointsItem (user, id, update, ctx) {
  let result = yield dataClient.put(helpers.setRequestPayload('/updateUserPoints/' + user + '/' + id, ctx, update));

  ctx.assert(result.statusCode === 200, 500, 'Error update points item for user', {
    res: result,
    req: {
      user: update.user_id || ctx.state.jwt.user.id,
      points: {
        id: id
      }
    }
  });

  return result.body;
}

function * removeUserPointsItem (user, id, ctx) {
  let result = yield dataClient.delete({ url: '/removeUserPoints/' + user + '/' + id });

  ctx.assert(result.statusCode === 200, 500, 'Error removing user points', {
    res: result,
    req: {
      user: ctx.state.jwt.user.id,
      points: {
        id: id
      }
    }
  });

  return result.body;
}
