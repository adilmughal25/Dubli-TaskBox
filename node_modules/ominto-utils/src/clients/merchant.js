'use strict';

const _ = require('lodash');
let dataClient;

function * getMerchants (arrayOfMerchantIds, ctx) {
  let result = yield dataClient.get('/getMultipleMerchants/', {ids: arrayOfMerchantIds}, ctx);
  return result.body;
}

function * getMerchantForTracker (merchantId, ctx) {
  let result = yield dataClient.get('/getMerchantForTracker/' + merchantId + '/', null, ctx);
  ctx.assert(result.statusCode !== 404, 404, 'Merchant not found', {merchantId: merchantId, internalCode: 140});
  return result.body;
}

function * getMerchantById (merchantId, ctx) {
  var lang = _.get(ctx, ['state', 'language'], 'en');
  var region = _.get(ctx, ['state', 'region'], 'us');
  let result = yield dataClient.get('/getMerchantById/' + merchantId + '/', _.omit({region: region, lang: lang}, _.isUndefined), ctx);
  ctx.assert(result.statusCode !== 404, 404, 'Merchant not found', {merchantId: merchantId, internalCode: 140});
  return result.body;
}

function * getMerchantBySlug (merchantSlug, lang, region, is_lounge_merchant, ctx) {
  let result = yield dataClient.get('/getMerchantBySlug/' + merchantSlug + '/', {lang: lang, region: region, is_lounge_merchant: is_lounge_merchant}, ctx);
  ctx.assert(result.statusCode !== 404, 404, 'Merchant not found', {slug: merchantSlug, lang: lang, region: region, internalCode: 140});
  return result.body;
}

function * getMerchantsByRegion (merchantRegion, lang, region, ctx) {
  let result = yield dataClient.get('/getMerchantsByRegion/', {r: merchantRegion, lang: lang, region: region}, ctx);
  return result.body;
}

function * getModelByVipMerchants (region, language, ctx) {
  let result = yield dataClient.get('/getModelByVipMerchants/', {region: region, language: language}, ctx);
  return result.body;
}

function * getAffiliatesFromUnallocatedTable(ctx) {
  let result = yield dataClient.get('/getAffiliatesFromUnallocatedTable/', {}, ctx);
  return result.body;
}

function * getMerchantsBySlugs (merchantSlugs, lang, region, ctx) {
  let result = yield dataClient.post('/getMerchantsBySlugs/', {slugs: merchantSlugs, lang: lang, region: region}, ctx);
  return result.body;
}

function * getMerchantsByIds (ids, lang, region, is_lounge_merchant, active, ctx) {
  ids = _.uniq(_.remove(ids, _.isFinite));
  if (_.isEmpty(ids)) {
    return ids;
  }
  let result = yield dataClient.get('/getMerchantsByIds/', {ids: ids, lang: lang, region: region, is_lounge_merchant: is_lounge_merchant, active: active}, ctx);
  return result.body;
}

function * getMerchantsByIdsForDashboard (ids, lang, active, ctx) {
  ids = _.uniq(_.remove(ids, _.isFinite));
  if (_.isEmpty(ids)) {
    return ids;
  }
  let result = yield dataClient.get('/getMerchantsByIdsForDashboard/', {ids: ids, lang: lang,  active: active}, ctx);
  return result.body;
}

function * getMerchantForLambdaTransaction (id, ctx) {
  var params = {id: id};
  let result = yield dataClient.get('/getMerchantForLambdaTransaction/', params , ctx);
  return result.body;
}

function * getRankedListOfMerchants (selectors, ctx) {
  var params = _.pick(selectors, ['region', 'language', 'category', 'limit', 'offset', 'userId',
  'userRegion', 'isNationalStore', 'isHighestCashbackOrder', 'hasFlat', 'hasPercentage' ,'isFavStore', 'is_lounge_merchant', 'nameFragment']);
  let result = yield dataClient.get('/searchMerchants/', params, ctx);
  return result.body;
}

function * getMerchantLogos (selectors, ctx) {
  var params = _.pick(selectors, ['region', 'language', 'category', 'limit', 'offset']);
  let result = yield dataClient.get('/topMerchantLogos/', params, ctx);
  return result.body;
}

function * getCashbacksForViewModel (merchantId, lang, region, ctx) {
  let result = yield dataClient.get('/getCashbacksForViewModel/' + merchantId + '/', {lang: lang, region: region} , ctx);
  return result.body;
}

function * getCashbacksForArrayOfMerchantIds (arrayOfMerchantIds, lang, region, ctx) {
  let result = yield dataClient.get('/getCashbacksForMultipleMerchants/', {ids: arrayOfMerchantIds, lang: lang, region: region}, ctx);
  return result.body;
}

function * getDealsForViewModel (merchantId, lang, region, ctx) {
  let result = yield dataClient.get('/getDealsForViewModel/' + merchantId + '/', {lang: lang, region: region} , ctx);
  return result.body;
}

function * getDealsForArrayOfMerchantIds (arrayOfMerchantIds, lang, region, ctx) {
  let result = yield dataClient.get('/getDealsForMultipleMerchants/', {ids: arrayOfMerchantIds, lang: lang, region: region}, ctx);
  return result.body;
}

function * getDealForTracker (dealId, ctx) {
  let result = yield dataClient.get('/getDealForTracker/' + dealId + '/', null, ctx);
  ctx.assert(result.statusCode !== 404, 404, 'Deal not found', {dealId: dealId, internalCode: 144});
  return result.body;
}

function * getCategoriesForArrayOfMerchantIds (arrayOfMerchantIds, ctx) {
  let result = yield dataClient.get('/getCategoriesForMultipleMerchants/', {ids: arrayOfMerchantIds}, ctx);
  return result.body;
}

function * getFlatRateCommission (merchantId, amount, ctx) {
  let result = yield dataClient.get('/getFlatRateCommission/', {merchantId: merchantId, amount: amount}, ctx);
  return result.body;
}

function * indexMerchant (merchantId,  ctx) {
  return yield dataClient.get('/indexMerchant/'  + merchantId + '/' , null, ctx);
}

function * getAllMerchantIds (ctx) {
  let result = yield dataClient.get('/getAllMerchantIds/' , null, ctx);
  return result.body;
}

module.exports = function init (config) {
  dataClient = require('../utils/rest-client')(config.data_api, false);
  return {
    getMerchants: getMerchants,
    getMerchantById: getMerchantById,
    getMerchantForTracker: getMerchantForTracker,
    getMerchantBySlug: getMerchantBySlug,
    getMerchantsBySlugs: getMerchantsBySlugs,
    getMerchantsByIds: getMerchantsByIds,
    getMerchantsByIdsForDashboard: getMerchantsByIdsForDashboard,
    getMerchantForLambdaTransaction: getMerchantForLambdaTransaction,
    getRankedListOfMerchants: getRankedListOfMerchants,
    getMerchantLogos: getMerchantLogos,
    getCashbacksForViewModel: getCashbacksForViewModel,
    getCashbacksForArrayOfMerchantIds: getCashbacksForArrayOfMerchantIds,
    getDealsForViewModel: getDealsForViewModel,
    getDealsForArrayOfMerchantIds: getDealsForArrayOfMerchantIds,
    getDealForTracker: getDealForTracker,
    getCategoriesForArrayOfMerchantIds: getCategoriesForArrayOfMerchantIds,
    getFlatRateCommission: getFlatRateCommission,
    getMerchantsByRegion: getMerchantsByRegion,
    getModelByVipMerchants: getModelByVipMerchants,
    getAffiliatesFromUnallocatedTable: getAffiliatesFromUnallocatedTable,
    indexMerchant: indexMerchant,
    getAllMerchantIds: getAllMerchantIds
  };
};
