'use strict';

let dataClient;

function * getAccessCodes(ctx) {
  let result = yield dataClient.get('/getAccessCodes/', {}, ctx);
  return result.body;
}

function * getAvailableAccessCode(ctx) {
  let result = yield dataClient.get('/getAvailableAccessCode/', {}, ctx);
  return result.body;
}

function * getAvailableAccessCodes(ctx) {
  let result = yield dataClient.get('/getAvailableAccessCodes/', {}, ctx);
  return result.body;
}

function * getAvailableAccessCodesCount(ctx) {
  let result = yield dataClient.get('/getAvailableAccessCodesCount/', {}, ctx);
  return result.body;
}

function * getAccessCodeById(id, ctx) {
  let result = yield dataClient.get('/getAccessCodeById/' + id + '/', null, ctx);
  return result.body;
}

function * getAccessCodeByCode(code, ctx) {
  let result = yield dataClient.get('/getAccessCodeByCode/' + code + '/', null, ctx);
  return result.body;
}

function * getAccessCodeByUserId(id, ctx) {
  let result = yield dataClient.get('/getAccessCodeByUserId/' + id + '/', null, ctx);
  return result.body;
}

function * getAccessCodeByUserIdAndType(id, type, ctx) {
  let result = yield dataClient.get('/getAccessCodeByUserIdAndType/' + id + '/' + type + '/', null, ctx);
  return result.body;
}

function * getAccessCodesByUserIdAndType(id, type, ctx) {
  let result = yield dataClient.get('/getAccessCodesByUserIdAndType/' + id + '/' + type + '/', null, ctx);
  return result.body;
}

function * getUiAccessByUserIdAndType(id, type, ctx) {
  let result = yield dataClient.get('/getUiAccessByUserIdAndType/' + id + '/' + type + '/', null, ctx);
  return result.body;
}

function * getAvailableAccessCodesByType(type, ctx) {
  let result = yield dataClient.get('/getAvailableAccessCodesByType/' + type + '/', null, ctx);
  return result.body;
}

function * getAvailableAccessCodesByTypeCount(type, ctx) {
  let result = yield dataClient.get('/getAvailableAccessCodesByTypeCount/' + type + '/', null, ctx);
  return result.body;
}

function * updateAccessCode (accessCodeFields, ctx) {
  let result = yield dataClient.patch('/updateAccessCode/', accessCodeFields, ctx);

  // TODO: update data contract -- something cleaner than SQL messages coming back from data
  if (result.body && result.body.code === 'ER_DUP_ENTRY') {
    ctx.throw(400, 'THIS IS FROM UTILS -> unique field already in use.', {
      internalCode: 52,
      duplicateKey: true
    });
  }
  return result.body;
}

function * updateAccessCodes (accessCodeFields, ctx) {
  let result = yield dataClient.patch('/updateAccessCodes/', accessCodeFields, ctx);

  // TODO: update data contract -- something cleaner than SQL messages coming back from data
  if (result.body && result.body.code === 'ER_DUP_ENTRY') {
    ctx.throw(400, 'THIS IS FROM UTILS -> unique field already in use.', {
      internalCode: 52,
      duplicateKey: true
    });
  }
  return result.body;
}

module.exports = function init (config) {
  dataClient = require('../utils/rest-client')(config.data_api, false);
  return {
    getAccessCodes: getAccessCodes,
    getAvailableAccessCode: getAvailableAccessCode,
    getAvailableAccessCodes: getAvailableAccessCodes,
    getAvailableAccessCodesCount: getAvailableAccessCodesCount,
    getAccessCodeById: getAccessCodeById,
    getAccessCodeByCode: getAccessCodeByCode,
    getAccessCodeByUserId: getAccessCodeByUserId,
    getAccessCodeByUserIdAndType: getAccessCodeByUserIdAndType,
    getAccessCodesByUserIdAndType: getAccessCodesByUserIdAndType,
    getUiAccessByUserIdAndType: getUiAccessByUserIdAndType,
    getAvailableAccessCodesByType: getAvailableAccessCodesByType,
    getAvailableAccessCodesByTypeCount: getAvailableAccessCodesByTypeCount,
    updateAccessCode: updateAccessCode,
    updateAccessCodes: updateAccessCodes
  };
};
