'use strict';

const _ = require('lodash');
const helpers = require('./helpers');
const toQueryString = require('../utils/url').toQueryString;
let dataClient;

module.exports = function init (configs, data) {
  // allowing the dataclient to be injected here is just to avoid having to re-write
  // so many tests which rely on stubbing methods of the dataclient via sinon
  if (data) {
    dataClient = data;
  } else {
    dataClient = require('../utils').getDataClient(configs.data_api.internalUrl, configs.data_api.auth);
  }

  return {
    createUser: createUser,
    addFriend:addFriend,
    patchUser: patchUser,
    deleteUser: deleteUser,
    getUserById: getUserById,
    getMyReferrals: getMyReferrals,
    getMyStrings:getMyStrings,
    getReferralFriendsSummary: getReferralFriendsSummary,
    getMySocialReferrals: getMySocialReferrals,
    getSocialReferralFriendsSummary: getSocialReferralFriendsSummary,
    getUserByEmail: getUserByEmail,
    getMyFriend: getMyFriend,
    updateFriendInvitedDate: updateFriendInvitedDate,
    getUserByPhoneNumber: getUserByPhoneNumber,
    getUserByFacebookId: getUserByFacebookId,
    getUserByTwitterId: getUserByTwitterId,
    getUserByGoogleId: getUserByGoogleId,
    getUserByPartnerId: getUserByPartnerId,
    getUserByMemberAndPartner: getUserByMemberAndPartner,
    getUserByPayoneerPayeeId: getUserByPayoneerPayeeId,
    getUserIdByOnlyPartnerId: getUserIdByOnlyPartnerId,
    getPPid: getPPid,
    getPartnerLogoUrlByUserId: getPartnerLogoUrlByUserId,
    getAllPartners: getAllPartners,
    getPartnerLogoUrlForReferredUserByUserId: getPartnerLogoUrlForReferredUserByUserId,
    getUserFromDeviceId: getUserFromDeviceId,
    getUsersByProgramReferrer: getUsersByProgramReferrer,
    getBspUsersByProgramReferrer: getBspUsersByProgramReferrer,
    getUserPoints: getUserPoints,
    getUserPointsBalance: getUserPointsBalance,
    getReferralData: getReferralData,
    getReferralSummary: getReferralSummary,
    getReferralTransactionSummary: getReferralTransactionSummary,
    getPrefs: getPrefs,
    patchPrefs: patchPrefs,
    addFavoriteMerchantToUser: addFavoriteMerchantToUser,
    removeFavoriteMerchantFromUser: removeFavoriteMerchantFromUser,
    getAllFavoriteMerchantIdsForUser: getAllFavoriteMerchantIdsForUser,
    markMerchantAsHidden: markMerchantAsHidden,
    markMerchantAsVisible: markMerchantAsVisible,
    saveActivationCode: saveActivationCode,
    deleteActivationCode: deleteActivationCode,
    getUserIdFromActivationCode: getUserIdFromActivationCode,
    saveGoogleStateToken: saveGoogleStateToken,
    getGoogleStateToken: getGoogleStateToken,
    saveTwitterStateToken: saveTwitterStateToken,
    getTwitterStateToken: getTwitterStateToken,
    saveInfiniaRedirect: saveInfiniaRedirect,
    getInfiniaRedirect: getInfiniaRedirect,
    saveClientAccessToken: saveClientAccessToken,
    getClientAccessToken: getClientAccessToken,
    getDwollaAccessToken: getDwollaAccessToken,
    saveDwollaAccessToken:  saveDwollaAccessToken,
    getUserMerchants: getUserMerchants,
    reassignUserMerchant: reassignUserMerchant,
    updateUserMerchant: updateUserMerchant,
    removeUserMerchant: removeUserMerchant,
    getAvailablePoliciesForUser: getAvailablePoliciesForUser,
    getAcceptedPolicies: getAcceptedPolicies,
    addUserAcceptance: addUserAcceptance,
    activateDeactivatePartner: activateDeactivatePartner,
    updatePartnerInfo: updatePartnerInfo,
    getPartnerReports: getPartnerReports,
    getAllSecurityQuestions: getAllSecurityQuestions,
    getSecurityQuestionsForUser: getSecurityQuestionsForUser,
    addSecurityQuestionsForUser: addSecurityQuestionsForUser,
    updateSecurityQuestionsForUser: updateSecurityQuestionsForUser,
    validateSecurityQuestionsForUser: validateSecurityQuestionsForUser,
    resetSecurityQuestionsForUser: resetSecurityQuestionsForUser,
    getBillingAddressesForUser: getBillingAddressesForUser,
    addBillingAddressForUser: addBillingAddressForUser,
    updateBillingAddressForUser: updateBillingAddressForUser,
    getUsersConversionRate: getUsersConversionRate,
    getPromoCode: getPromoCode,
    patchPromocode: patchPromocode,
    redeemPromocode: redeemPromocode,
    createBusinessAssociateClient: createBusinessAssociateClient,
    updateBusinessAssociateClient: updateBusinessAssociateClient,
    getBusinessAssociateClient: getBusinessAssociateClient


  };
};


function * createBusinessAssociateClient(payload, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/createBusinessAssociate/', ctx, payload));
  ctx.assert(result.statusCode === 201, 500, 'Unexpected result from data service during create business associate.', {
    res: result,
    payload: payload,
    internalCode: 351
  });

  return result.statusCode;
}

function * updateBusinessAssociateClient(payload, ctx) {
  let result = yield dataClient.put(helpers.setRequestPayload('/updateBusinessAssociate/', ctx, payload));

  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during updating business associate.', {
    res: result,
    payload: payload,
    internalCode: 351
  });
  return result.body;
}


function * getBusinessAssociateClient(baid, bypassCache, ctx) {
  let qs = toQueryString({baid: baid, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getBusinessAssociateDetails/' + qs, ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPartnerReports', {
    res: result,
    internalCode: 351
  });

  return result.body;

}


function * activateDeactivatePartner (status, partnerId,bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/activateDeactivatepartner/' + toQueryString({
        status: status,
        partnerId: partnerId,
        bypass: bypass
      }), ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserFromDeviceId', {
    res: result,
    internalCode: 351
  });
  return result.body;
}

function * getPartnerReports (partnerId, givenDate, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getPartnerReports/' + toQueryString({
        partnerId: partnerId,
        givenDate: givenDate,
        bypass: bypass
      }), ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPartnerReports', {
    res: result,
    internalCode: 351
  });
  return result.body;
}

function * createUser (userObject, ctx) {
  let policy_id = userObject.policy_id;
  delete userObject.policy_id;

  let result = yield dataClient.post(helpers.setRequestPayload('/createUser/', ctx, userObject));

  // check for duplicate unique key
  // TODO: update data contract -- something cleaner than SQL messages coming back from data
  if (result.body && result.body.code === 'ER_DUP_ENTRY') {
    ctx.throw(400, 'Unique field already in use', {
      internalCode: 52,
      duplicateKey: true
    });
  }
  ctx.assert(result.statusCode === 201, 500, 'Unexpected result from data service during createUser', {
    res: result,
    userObject: userObject,
    internalCode: 351
  });

  if (policy_id) {
    try {
      let userAcceptanceObject = {
        userId: result.body.id,
        policyId: policy_id,
        fromIP: ctx.request.ip,
        fromBrowser: ctx.state.userAgent.browser,
        dateAccepted: new Date().toISOString()
      };

      yield addUserAcceptance(userAcceptanceObject, ctx);
    } catch (e) {
      this.logger.error({err: e}, "error trying to save acceptance during user create");
    }
  }
  return result.body;
}

function * addFriend (friend,ctx) {

  let result = yield dataClient.post(helpers.setRequestPayload('/addFriend/',ctx,friend));
  return result.body;
}

function * patchUser (userId, userFields, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/patchUser/' + userId + '/', ctx, userFields));

  // check for duplicate unique key
  // TODO: update data contract -- something cleaner than SQL messages coming back from data
  if (result.body && result.body.code === 'ER_DUP_ENTRY') {
    ctx.throw(400, 'Unique field already in use', {
      internalCode: 52,
      duplicateKey: true
    });
  }
  ctx.assert(result.statusCode === 204, 500, 'Unexpected result from data service during patchUser', {
    res: result,
    userId: userId,
    userFields: userFields,
    internalCode: 351
  });
}

function * deleteUser (userId, ctx) {
  let result = yield dataClient.del(helpers.setRequestPayload('/deleteUser/' + userId + '/', ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during deleteUser', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * getUserById (userId, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserById/' + userId + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserById', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * updatePartnerInfo (body, ctx) {
  let result = yield dataClient.put(helpers.setRequestPayload('/updatePartnerInfo/' + toQueryString(body
      ), ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserFromDeviceId', {
    res: result,
    internalCode: 351
  });
  return result.body;
}
function * getMyReferrals (userId, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getMyReferrals/' + userId + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getMyReferrals', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}
function * getMyStrings (strings, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getMyStrings/' + strings + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getMyStrings', {
    res: result,
    strings: strings,
    internalCode: 351
  });
  return result.body;
}
function * getReferralFriendsSummary (userId, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getReferralFriendsSummary/' + userId + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getReferralFriendsSummary', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * getMySocialReferrals (userId, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getMySocialReferrals/' + userId + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getMySocialReferrals', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * getSocialReferralFriendsSummary (userId, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getSocialReferralFriendsSummary/' + userId + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getSocialReferralFriendsSummary', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}
function * getUserIdByOnlyPartnerId (id, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserIdByOnlyPartnerId/' + id + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserIdByOnlyPartnerId', {
    res: result,
    id: id,
    internalCode: 351
  });
  return result.body;
}

function * getPPid (id, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getPPid/' + id + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPPid', {
    res: result,
    id: id,
    internalCode: 351
  });
  return result.body;
}
function * getAllPartners ( limit,offset,date,bypassCache, ctx) {
  console.log(" the limt and offset are =====================================",limit,offset);
  let result = yield dataClient.get(helpers.setRequestPayload('/getAllPartners/'    +  toQueryString({
        limit: limit,
        offset: offset,
        date:date,
        bypass: bypassCache
      }), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserIdByOnlyPartnerId', {
    res: result,
    limit: limit,
    offset: offset,
    internalCode: 351
  });
  return result.body;
}

function * getPartnerLogoUrlByUserId (id, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getPartnerLogoUrlByUserId/' + id + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPartnerLogoUrlByUserId', {
    res: result,
    id: id,
    internalCode: 351
  });
  return result.body;
}

function * getPartnerLogoUrlForReferredUserByUserId (id, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getPartnerLogoUrlForReferredUserByUserId/' + id + '/' + toQueryString({bypass: bypassCache}), ctx));
 if(result.body) {
    ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
    ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPartnerLogoUrlForReferredUserByUserId', {
      res: result,
      id: id,
      internalCode: 351
    });
    return result.body;
  }
  else
      this.status=200
}

function * getUserByEmail (whitelabel, email, bypassCache, ctx) {
  let qs = toQueryString({whitelabel: whitelabel, email: email, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByEmail/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByEmail', {
    res: result,
    whitelabel: whitelabel,
    email: email,
    internalCode: 351
  });
  return result.body;
}


function * getMyFriend (whitelabel, email, referrer,bypassCache, ctx) {
  let qs = toQueryString({whitelabel: whitelabel, email: email, referrer:referrer,bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getMyFriend/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getMyFriend', {
    res: result,
    whitelabel: whitelabel,
    email: email,
    referrer:referrer,
    internalCode: 351
  });
  return result.body;
}

function * updateFriendInvitedDate (whitelabel, email, referrer,bypassCache, ctx) {
  let qs = toQueryString({whitelabel: whitelabel, email: email, referrer:referrer,bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/updateFriendInvitedDate/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during updateFriendInvitedDate', {
    res: result,
    whitelabel: whitelabel,
    email: email,
    referrer:referrer,
    internalCode: 351
  });
  return result.body;
}

function * getUserByPhoneNumber (whitelabel, phone, bypassCache, ctx) {
  let qs = toQueryString({whitelabel: whitelabel, phone: phone, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByPhoneNumber/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByPhoneNumber', {
    res: result,
    whitelabel: whitelabel,
    phone: phone,
    internalCode: 351
  });
  return result.body;
}

function * getUserByFacebookId (whitelabel, facebookId, bypassCache, ctx) {
  let qs = toQueryString({whitelabel: whitelabel, facebookid: facebookId, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByFacebookId/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByFacebookId', {
    res: result,
    whitelabel: whitelabel,
    facebookId: facebookId,
    internalCode: 351
  });
  return result.body;
}

function * getUserByTwitterId (whitelabel, twitterId, bypassCache, ctx) {
  let qs = toQueryString({whitelabel: whitelabel, twitterid: twitterId, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByTwitterId/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByTwitterId', {
    res: result,
    whitelabel: whitelabel,
    twitterId: twitterId,
    internalCode: 351
  });
  return result.body;
}

function * getUserByGoogleId (whitelabel, googleId, bypassCache, ctx) {
  let qs = toQueryString({whitelabel: whitelabel, googleid: googleId, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByGoogleId/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByGoogleId', {
    res: result,
    whitelabel: whitelabel,
    googleId: googleId,
    internalCode: 351
  });
  return result.body;
}

function * getUserByPartnerId (partner, id, bypassCache, ctx) {
  let qs = toQueryString({partner: partner, id: id, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByPartnerId/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByPartnerId', {
    res: result,
    partner: partner,
    id: id,
    internalCode: 351
  });
  return result.body;
}

function * getUserByMemberAndPartner (memberId, partnerId, bypassCache, ctx) {
  let qs = toQueryString({memberId: memberId, partnerId: partnerId, bypass: bypassCache});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByMemberAndPartner/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByTwitterId', {
    res: result,
    memberId: memberId,
    partnerId: partnerId,
    internalCode: 351
  });
  return result.body;
}

function * getUserByPayoneerPayeeId (payeeId, bypassCache, ctx) {
  let qs = toQueryString({payeeId: payeeId});
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserByPayoneerPayeeId/' + qs, ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 111});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserByPayoneerPayeeId', {
    res: result,
    payeeId: payeeId,
    internalCode: 351
  });
  return result.body;
}

function * getUserFromDeviceId (deviceId, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserFromDeviceId/' + deviceId + '/' + toQueryString({bypass: bypass}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 112});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserFromDeviceId', {
    res: result,
    deviceId: deviceId,
    internalCode: 351
  });
  return result.body;
}
function * getUsersByProgramReferrer (referrer, start, end,baid, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getUsersByProgramReferrer/' + referrer + '/' + toQueryString({
    start: start,
    end: end,
    baid: baid,
    bypass: bypass
  }), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'No referrals found', {internalCode: 112});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserFromDeviceId', {
    res: result,
    referrer: referrer,
    internalCode: 351
  });
  return result.body;
}
function * getBspUsersByProgramReferrer (referrer, start, end,partner, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getBspUsersByProgramReferrer/' + referrer + '/' + toQueryString({
        start: start,
        end: end,
        partner: partner,
        bypass: bypass
      }), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'No referrals found', {internalCode: 112});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserFromDeviceId', {
    res: result,
    referrer: referrer,
    internalCode: 351
  });
  return result.body;
}
function * getUserPoints (userId, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserPoints/' + userId + '/' + toQueryString({bypass: bypass}), ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserPoints', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * getUserPointsBalance (userId, bypass, ctx) {
  var userPoints = 0;
  if (userId) {
    let result = yield dataClient.get(helpers.setRequestPayload('/getUserPointsBalance/' + userId + '/' + toQueryString({bypass: bypass}), ctx));
    if (result.statusCode === 404) {
      return 0;
    }
    ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserPointsBalance', {
      res: result,
      userId: userId,
      internalCode: 351
    });
    userPoints = result.body.total || 0;
  }
  return userPoints;
}

function * getReferralData (userId, referralId, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getReferralData/' + userId + '/' + referralId + '/' + toQueryString({bypass: bypass}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'Referral not found', {internalCode: 112});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getReferralData', {
    res: result,
    userId: userId,
    referralId: referralId,
    internalCode: 351
  });
  return result.body;
}

function * getReferralSummary (userId, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getReferralSummary/' + userId + '/' + toQueryString({bypass: bypass}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 112});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getReferralSummary', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body.referrals;
}

function * getReferralTransactionSummary (userId, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getReferralTransactionSummary/' + userId + '/' + toQueryString({bypass: bypass}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 112});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getReferralTransactionSummary', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body.referrals;
}

function * getPrefs (userId, bypass, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getPrefs/' + userId + '/' + toQueryString({bypass: bypass}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 112});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPrefs', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * patchPrefs (userId, prefs, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/updatePrefs/' + userId + '/', ctx, prefs));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 112});
  ctx.assert(result.statusCode === 204, 500, 'Unexpected result from data service during patchPrefs', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * addFavoriteMerchantToUser (userId, merchantId, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/addFavoriteMerchantToUser/', ctx, {userid: userId, merchantid: merchantId}));
  ctx.assert(result.statusCode !== 404, result.statusCode, result.body, {internalCode: 101});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during addFavoriteMerchantToUser', {
    res: result,
    userId: userId,
    merchantId: merchantId,
    internalCode: 351
  });
}

function * removeFavoriteMerchantFromUser (userId, merchantId, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/removeFavoriteMerchantFromUser/', ctx, {userid: userId, merchantid: merchantId}));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during removeFavoriteMerchantFromUser', {
    res: result,
    userId: userId,
    merchantId: merchantId,
    internalCode: 351
  });
}

function * getAllFavoriteMerchantIdsForUser (userId, bypass, ctx) {
  let qs = toQueryString({bypass: bypass});
  let result = yield dataClient.get(helpers.setRequestPayload('/getFavoriteMerchantIdsForUser/' + userId + '/' + qs, ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getAllFavoriteMerchantIdsForUser', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return _.values(_.mapValues(result.body, 'id'));
}

function * markMerchantAsHidden (userId, merchantId, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/markMerchantAsHidden/', ctx, {userid: userId, merchantid: merchantId}));
  ctx.assert(result.statusCode !== 404, result.statusCode, result.body, {internalCode: 101});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during markMerchantAsHidden', {
    res: result,
    userId: userId,
    merchantId: merchantId,
    internalCode: 351
  });
}

function * markMerchantAsVisible (userId, merchantId, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/markMerchantAsVisible/', ctx, {userid: userId, merchantid: merchantId}));
  ctx.assert(result.statusCode !== 404, result.statusCode, result.body, {internalCode: 101});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during markMerchantAsHidden', {
    res: result,
    userId: userId,
    merchantId: merchantId,
    internalCode: 351
  });
}

function * saveActivationCode (activationCode, userId, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/saveActivationCode/' + activationCode + '/', ctx, {userid: userId}));
  if (result.statusCode === 400) return null;
  ctx.assert(result.statusCode === 201, 500, 'Unable to save activation code', {
    res: result,
    activationCode: activationCode,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * deleteActivationCode (activationCode, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/deleteActivationCode/' + activationCode + '/', ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unable to delete activation code', {
    res: result,
    activationCode: activationCode,
    internalCode: 351
  });
  return result.body;
}

function * getUserIdFromActivationCode (activationCode, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getUserIdFromActivationCode/' + activationCode + '/', ctx));
  if (result.statusCode === 400) return null;
  ctx.assert(result.statusCode === 200, 500, 'Activation code is invalid', {
    res: result,
    activationCode: activationCode,
    internalCode: 20
  });
  return result.body;
}

function * saveGoogleStateToken (token, value, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/saveGoogleStateToken/' + token + '/', ctx, {value: value}));
  if (result.statusCode === 400) return null;
  ctx.assert(result.statusCode === 201, 500, 'Unable to save google state token', {
    res: result,
    token: token,
    value: value,
    internalCode: 351
  });
  return result.body;
}

function * getGoogleStateToken (token, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getGoogleStateToken/' + token + '/', ctx));
  if (result.statusCode === 400) return null;
  ctx.assert(result.statusCode === 200, 500, 'Google state token is invalid', {
    res: result,
    token: token,
    internalCode: 351
  });
  return result.body;
}

function * saveTwitterStateToken (token, value, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/saveTwitterStateToken/' + token + '/', ctx, {value: value}));
  if (result.statusCode === 400) return null;
  ctx.assert(result.statusCode === 201, 500, 'Unable to save Twitter state token', {
    res: result,
    token: token,
    value: value,
    internalCode: 351
  });
  return result.body;
}

function * getTwitterStateToken (token, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getTwitterStateToken/' + token + '/', ctx));
  if (result.statusCode === 400) return null;
  ctx.assert(result.statusCode === 200, 500, 'Twitter state token is invalid', {
    res: result,
    token: token,
    internalCode: 351
  });
  return result.body;
}

function * saveInfiniaRedirect (userId, redirect, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/saveInfiniaRedirect/' + userId, ctx, {redirect_url: redirect}));
  ctx.assert(result.statusCode === 201, 500, 'Unable to save Infinia redirect url', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * getInfiniaRedirect (userId, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getInfiniaRedirect/' + userId, ctx));
  if (result.statusCode === 404) return null;
  ctx.assert(result.statusCode === 200, 500, 'Unable to get Infinia redirect', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function * saveClientAccessToken (client, userId, values, ctx) {
  return yield dataClient.post(helpers.setRequestPayload('/saveAccessTokenForClient/' + client + '/' + userId + '/', ctx, values));
}

function * getClientAccessToken (client, userId, ctx) {
  return yield dataClient.get(helpers.setRequestPayload('/getAccessTokenForClient/' + client + '/' + userId + '/', ctx));
}

function * saveDwollaAccessToken (values, ctx) {
  return yield dataClient.post(helpers.setRequestPayload('/saveDwollaAccessToken/', ctx, values));
}

function * getDwollaAccessToken (ctx) {
  return yield dataClient.get(helpers.setRequestPayload('/getDwollaAccessToken/', ctx));
}

// function * getUserMerchants (userId, ctx) {
//   return get('/searchUserMerchant', {
//     userId: userId,
//     includeHidden: true
//   }, ctx);
// }


function * getUserMerchants (userId, favOnly, region, lang, ctx) {
  // return get('/searchUserMerchant', {
  //   userId: userId,
  //   includeHidden: true
  // }, ctx);

  console.log("Inside getUserMerchants of util/clients/user.js");
  //console.log("Inside getUserMerchants of util/clients/user.js");
  let result = yield dataClient.get(helpers.setRequestPayload('/searchUserMerchant/' + toQueryString({
        region: region,
        language: lang,
        userId: userId,
        favOnly: favOnly
      }), ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getUserMerchants', {
    res: result
  });
  return result.body;

}

function * reassignUserMerchant (currentOwner, targetOwner, merchantId, ctx) {
  return post(['/reassignUserMerchantEntry', currentOwner, merchantId], ctx, {
    target: targetOwner
  });
}

function * updateUserMerchant (userId, merchantId, update, ctx) {
  return post(['/updateUserMerchant', userId, merchantId], ctx, update);
}

function * removeUserMerchant (userId, merchantId, ctx) {
  return delete_(['/removeUserMerchant', userId, merchantId], ctx);
}

function * getAllSecurityQuestions (ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getAllSecurityQuestions', ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getAllSecurityQuestions', {
    res: result,
    internalCode: 351
  });

  return result.body;
}

function * getSecurityQuestionsForUser (userId, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getSecurityQuestionsForUser/' + userId, ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getSecurityQuestions', {
    res: result,
    userId: userId,
    internalCode: 351
  });

  return result.body;
}

function * addSecurityQuestionsForUser (userId, payload, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/addSecurityQuestionsForUser/'+ userId, ctx, payload));
  return result.body;
}

function * updateSecurityQuestionsForUser (userId, payload, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/updateSecurityQuestionsForUser/' + userId + '/', ctx, payload));
  return result.body;
}

function * resetSecurityQuestionsForUser (userId, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/resetSecurityQuestionsForUser/'+ userId, ctx, {}));
  return result.body;
}

function * validateSecurityQuestionsForUser (userId, payload, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/validateSecurityQuestionsForUser/'+ userId, ctx, payload));
  return result.body;
}

function * getBillingAddressesForUser (userId, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getBillingAddressesForUser/' + userId, ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getBillingAddressesForUser', {
    res: result,
    userId: userId,
    internalCode: 351
  });

  return result.body;
}

function * addBillingAddressForUser (userId, payload, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/addBillingAddressForUser/'+ userId, ctx, payload));
  return result.body;
}

function * updateBillingAddressForUser (userId, payload, ctx) {
  let result = yield dataClient.patch(helpers.setRequestPayload('/updateBillingAddressForUser/' + userId + '/', ctx, payload));
  return result.body;
}

function * getAvailablePoliciesForUser (userId, whitelabel, lang, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getAvailablePoliciesForUser/' + userId + '/' + toQueryString({
      whitelabel: whitelabel,
      lang: lang,
      bypass: bypassCache
    }), ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getAvailablePoliciesForUser', {
    res: result,
    userId: userId,
    whitelabel: whitelabel,
    lang: lang,
    internalCode: 351
  });
  return result.body;
}

function * getAcceptedPolicies (userId, bypassCache, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getAcceptedPolicies/' + userId + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getAcceptedPolicies', {
    res: result,
    userId: userId,
    internalCode: 351
  });
  return result.body;
}

function* addUserAcceptance (userAcceptanceObject, ctx) {
  let result = yield dataClient.post(helpers.setRequestPayload('/createUserAcceptance', ctx, userAcceptanceObject));
  ctx.assert(result.statusCode === 201, 500, 'Unexpected result from data service during addUserAcceptance', {
    res: result,
    acceptance: userAcceptanceObject,
    internalCode: 351
  });
  return result.body;
}

function is2xx (status) {
  return !!Math.floor(status / 200);
}

function pathJoin (path) {
  return _.isArray(path) ? path.join('/') : path;
}

function checkResponse (ctx, resp, error) {
  ctx.assert(is2xx(resp.statusCode), 500, 'Unexpected result from data service during reassignUserMerchantEntry',
      _.extend(error, {res: resp, internalCode: 351}));
}
/*
function * get (path, ctx, query) {
  const result = yield dataClient.get(helpers.setRequestPayload(pathJoin(path) + toQueryString(query || {}), ctx));
  checkResponse(ctx, result, {
    path: path,
    query: query
  });
  return result.body;
}*/

function * post (path, ctx, body) {
  const result = yield dataClient.post(helpers.setRequestPayload(pathJoin(path), ctx, body));
  checkResponse(ctx, result, {
    path: path,
    body: body
  });
  return result.body;
}

function * delete_ (path, ctx, query) {
  const result = yield dataClient.del(helpers.setRequestPayload(pathJoin(path) + toQueryString(query || {}), ctx));
  checkResponse(ctx, result, {
    path: path,
    query: query
  });
  return result.body;
}

function * getUsersConversionRate (d, ctx) {
  let result = yield dataClient.get(helpers.setRequestPayload('/getUsersConversionRate/d/' + toQueryString({d: d}), ctx));
  return result.body;
}


function * getPromoCode (code,partner, bypassCache, ctx) {
  console.log(" iam called in tils",code);
  let result = yield dataClient.get(helpers.setRequestPayload('/getPromoCode/' + code + '/'+ partner + '/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during getPromoCode', {
    res: result,
    code: code,
    partner: partner,
    internalCode: 351
  });
  return result.body;
}

function * patchPromocode (code,id ,bypassCache, ctx) {
  console.log(" iam called in tils",code,id);
  let result = yield dataClient.get(helpers.setRequestPayload('/patchPromocode/' + code + '/' + id +'/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during patchPromocode', {
    res: result,
    code: code,
    id: id,
    internalCode: 351
  });
  return result.body;
}

function * redeemPromocode (id ,bypassCache, ctx) {
  console.log(" iam called in tils",id);
  let result = yield dataClient.get(helpers.setRequestPayload('/redeemPromocode/'  + id +'/' + toQueryString({bypass: bypassCache}), ctx));
  ctx.assert(result.statusCode !== 404, 404, 'User not found', {internalCode: 110});
  ctx.assert(result.statusCode === 200, 500, 'Unexpected result from data service during redeemPromocode', {
    res: result,
    id: id,
    internalCode: 351
  });
  return result.body;
}