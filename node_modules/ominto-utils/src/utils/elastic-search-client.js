'use strict';
var AWS = require('aws-sdk');
var _ = require('lodash');
var path = require('path');
var uuid = require('node-uuid');
const allowedOptions =  ['minimum_should_match', 'min_score', 'from', 'size'];
const providerChain = new AWS.CredentialProviderChain();
providerChain.providers.push(new AWS.EnvironmentCredentials('AWS'));
providerChain.providers.push(new AWS.EC2MetadataCredentials());

function _createCredentialPromise(){
  return new Promise(function(resolve, reject){
    providerChain.resolve(function(err, credentials){
      if(err){
        reject(err);
      } else {
        resolve(credentials);
      }
    });
  });
}

var credentials = _createCredentialPromise();

function ElasticSearchClient(config){
  if(!this || this.constructor !== ElasticSearchClient){
    return new ElasticSearchClient(config);
  }
  this.config = _.defaults({}, config, {
    region: 'us-east-1'
  });
  this.endpoint = new AWS.Endpoint(this.config.endpoint);
  this.client = new AWS.NodeHttpClient();
  this.logger = config.logger || {
    info: console.log.bind(console),
    error: console.log.bind(console)
  };
}

function _path(){
  var args = _.filter(_.toArray(arguments), item => !!item);
  args.unshift("/");
  try {
    return path.join.apply(null, args.map(arg => arg + ""));
  }catch(err){
    this.logger.info("Error when creating path: ", args);
    throw err;
  }
}

function * _createPath(path){
  var result = false;
  var response = yield _request.call(this, "HEAD", path);
  if(response.statusCode === 404){
    result = true;
  }
  return result;
}

ElasticSearchClient.prototype.getIndices = function * (){
  var response = yield _request.call(this, "GET", _path.call(this, "_cat", "indices"));
  _checkResponse(response);
  var lines = _.filter(response.body.split('\n'), line => !!line.trim()); //Remove empty lines
  return lines.map(line => {
    var parts = line.trim().split(/\s+/);
    return {
      health: parts[0],
      status: parts[1],
      name: parts[2],
      primaries: parts[3],
      replicas: parts[4],
      count: parts[5],
      deleted: parts[6],
      size: parts[7],
      primarySize: parts[8]
    };
  });
};

ElasticSearchClient.prototype.deleteIndex = function * (index){
  return yield this.deleteIndices(index);
};

ElasticSearchClient.prototype.deleteIndices = function * (){
  var indices = _.flattenDeep(_.toArray(arguments));
  return yield _request.call(this, "DELETE", _path.call(this, indices.join(",")));
};

ElasticSearchClient.prototype.createIndex = function * (index){
  yield _createPath.call(this, _path.call(this, index));
};

ElasticSearchClient.prototype.createType = function * (index, type, mapping){
  mapping = mapping || {};
  yield this.createIndex(index);
  yield _createPath.call(this, _path.call(this, index, "_mapping", type), mapping);
};

function * _request (method, path, body) {
  body = _.isString(body) ? body : JSON.stringify(body);
  var self = this;
  var req = new AWS.HttpRequest(this.endpoint);
  req.path = path;
  req.method = method;
  req.region = this.config.region;
  req.headers['presigned-expires'] = false;
  req.headers['Host'] = this.endpoint.host;
  if(body) {
    req.body = body;
  }

  var creds = yield credentials;

  if(creds.needsRefresh()){
    credentials = new Promise((resolve, reject) => {
      creds.refresh((err) => {
        if(err){
          reject(err);
        }else{
          credentials = _createCredentialPromise();
          credentials.then(result => resolve(result)).catch(err => reject(err));
        }
      });
    });

    creds = yield credentials;
  }

  if(creds.accessKeyId) {
    var signer = new AWS.Signers.V4(req, 'es');  // es: service code
    signer.addAuthorization(creds, new Date());
  }

  var response = yield new Promise((resolve, reject) => {
    self.client.handleRequest(req, null, function(httpResp){
      var response = {
        body: ''
      };
      httpResp.on('data', function(chunk){
        response.body += chunk;
      });
      httpResp.on('headers', function(statusCode, headers){
        response.statusCode = statusCode;
        response.headers = headers;
      });
      httpResp.on('end', function(){
        try {
          _.each(response.headers || [], (value, name) => {
            if(name.toLowerCase() === 'content-type'){
              if(value.toLowerCase().indexOf("application/json") > -1 && response.body.length > 0){
                response.body = JSON.parse(response.body);
              }
              return false;
            }
          });
          resolve(response);
        }catch(err){
          var error = new Error("An error occurred parsing request body: " + JSON.stringify({
            response: response,
            message: err.message,
            stack: err.stack
          }));
          error.response = response;
          error.originalError = err;
          reject(error, null, 2);
        }
      });
    }, err => reject(err));
  });

  return response;
}

function _checkResponse(response){
  if(response.statusCode !== 200) {
    throw new Error("Unexpected status code: " + JSON.stringify({
        statusCode: response.statusCode,
        body: response.body
      }));
  }
}

ElasticSearchClient.prototype.search = function*(index, type, query){
  var url = _path.call(this, index, type, "_search");
  var body = undefined;

  if(query instanceof ElasticSearchQuery){
    body = query.toString().toLowerCase();
  }else if(_.isObject(query)){
    body = query;
  }else{
    url += '?q=' + query;
  }

  // Elastic search documentation shows GET with request body.
  // AWS elastic search appears to expect POST.
  var response = yield _request.call(this, "POST", url, body);
  _checkResponse(response);
  var result = {
    hits: response.body.hits.hits,
    meta: {
      timeInMs: response.body.took,
      total: response.body.hits.total,
      maxScore: response.body.hits.max_score,
      timedOut: response.body.timed_out
    }
  };
  result.hits = result.hits.map(item => {
    var result = item._source;
    result.meta = {
      index: item._index,
      type: item._type,
      id: item._id,
      score: item._score
    };
    return result;
  });
  return result;
};

ElasticSearchClient.prototype.index = function * (index, type, body) {
  yield this.createIndex(index);
  return yield _request.call(this, "PUT", _path.call(this, index, type, body.id), body);
};

ElasticSearchClient.prototype.delete = function * (index, type, id) {
  return yield _request.call(this, "DELETE", _path.call(this, index, type, id));
};

ElasticSearchClient.prototype.createQuery = function(index, type, options){
  return new ElasticSearchQuery(this, index, type, options);
};

ElasticSearchClient.prototype.createBulkQuery = function(){
  return new ElasticSearchBulkQueryBuilder(this);
};

function ElasticSearchBulkQueryBuilder(client){
  this.operations = [];
  this.client = client;
}

ElasticSearchBulkQueryBuilder.prototype.index = function(index, type, obj){
  var id = obj.id || uuid.v4();
  this.operations.push(JSON.stringify({index: _.omit({_index: index, _type: type, _id: id}, item => !item)}));
  this.operations.push(_.isString(obj) ? obj : JSON.stringify(obj));
};

ElasticSearchBulkQueryBuilder.prototype.perform = function*(){
  var body = this.operations.join('\n') + '\n'; // Newline may be required at end.
  return yield _request.call(this.client, "POST", _path.call(this.client, "_bulk"), body);
};

function ElasticSearchQuery(client, index, type, options){
  this.client = client;
  this.index = index;
  this.type = type;
  this.types = {
    must: [],
    must_not: [],
    should: []
  };
  this.options = _.pick(options, allowedOptions);
}

ElasticSearchQuery.prototype.set = function (option, value){
  if(allowedOptions.indexOf(option) > -1){
    this.options[option] = value;
  }
  return this;
};

ElasticSearchQuery.prototype.perform = function * () {
  return yield this.client.search(this.index, this.type, this);
};

ElasticSearchQuery.prototype.mustInclude = function(str){
  var subQuery = new ElasticSearchSubQuery(this);
  if(str){
    subQuery.match(str);
  }
  this.types.must.push(subQuery);
  return subQuery;
};

ElasticSearchQuery.prototype.mustNotInclude = function(str){
  var subQuery = new ElasticSearchSubQuery(this);
  if(str){
    subQuery.match(str);
  }
  this.types.must_not.push(subQuery);
  return subQuery;
};

ElasticSearchQuery.prototype.shouldInclude = function(str){
  var subQuery = new ElasticSearchSubQuery(this);
  if(str){
    subQuery.match(str);
  }
  this.types.should.push(subQuery);
  return subQuery;
};

ElasticSearchQuery.prototype.toJSON = function(){
  var result = {
    query: {
      bool: {
      }
    }
  };

  _.extend(result, _.pick(this.options, ['size', 'from']));

  _.each(this.types, (type, name) => {
    if(type.length > 0){
      var node = result.query.bool[name] = [];
      _.each(type, subquery => {
        node.push(subquery.toJSON());
      });
    }
  });

  if(this.options.min_score){
    result.min_score = this.options.min_score;
  }

  if(!(result.query.bool.must || []).length || !_.isUndefined(this.options.minimum_should_match)){
    result.query.bool.minimum_should_match = !_.isUndefined(this.options.minimum_should_match) ? this.options.minimum_should_match : 1;
  }

  return result;
};

ElasticSearchQuery.prototype.toString = function(){
  return JSON.stringify(this, null, arguments[0]);
};

function ElasticSearchSubQuery(parent){
  this.parent = parent;
  this.operation = 'match';
  this._field = "_all";
  this.config = {};
}

ElasticSearchSubQuery.prototype.toJSON = function(){
  var result;
  if(this.operation) {
    result = {};
    if(this.operation === 'query'){
      result.bool = JSON.parse(this._query.toString()).query.bool;
    } else {
      result[this.operation] = {};
      var config = _.clone(this.config);
      if (this.operation.startsWith('match')) {
        config = config.value;
      }
      result[this.operation][this._field] = config;
    }
  }
  return result;
};

ElasticSearchSubQuery.prototype.query = function(){
  this.operation = 'query';
  this._query = new ElasticSearchQuery();
  return this._query;
};

ElasticSearchSubQuery.prototype.toString = function(){
  return JSON.stringify(this, null, arguments[0]);
};

ElasticSearchSubQuery.prototype.and = function(){
  return this.parent;
};

ElasticSearchSubQuery.prototype.perform = function * (){
  return yield this.parent.perform();
};

ElasticSearchSubQuery.prototype.field = function(field, value){
  this._field = field;
  if(!(_.isUndefined(value) || _.isNull(value) || value === '')){
    this.match(value);
  }
  return this;
};

function _subqueryOperation(operation, str){
  this.operation = operation;
  this.config.value = str;
  return this;
}

ElasticSearchSubQuery.prototype.boost = function (boost){
  this.config.boost = boost;
  return this;
};

ElasticSearchSubQuery.prototype.fuzzy = function(str, fuzziness){
  this.config.fuzziness = fuzziness;
  return _subqueryOperation.call(this, 'fuzzy', str);
};

ElasticSearchSubQuery.prototype.term = function(str){
  return _subqueryOperation.call(this, 'term', str);
};

ElasticSearchSubQuery.prototype.match = function(str){
  return _subqueryOperation.call(this, 'match', str);
};

ElasticSearchSubQuery.prototype.matchPhrase = function(str){
  return _subqueryOperation.call(this, 'match_phrase', str);
};

ElasticSearchSubQuery.prototype.wildcard = function(term){
  if(term.indexOf('*') == -1){
    this.and().shouldInclude().field(this._field, term);
    term = '*' + term + '*';
  }
  return _subqueryOperation.call(this, 'wildcard', term);
};

module.exports = ElasticSearchClient;
