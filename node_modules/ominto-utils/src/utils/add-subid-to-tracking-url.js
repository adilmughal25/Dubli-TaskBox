"use strict";

const url = require('url');
const querystring = require('querystring');
const _ = require('lodash');

const ADCELL_MATCH = /^(https:\/\/www.adcell.de\/promotion\/[^\/]+\/promoId\/[^\/]+\/slotId\/[^\/]+)(\/subid\/([^\/]+)\/?)?/;
const BELBOON_MATCH = /^(https?:\/\/.+belboon.de\/adtracking\/\w+\.html)(\/subid=([^\/]+)\/?)?/;
const PHG_MATCH = /(http:\/\/prf.hn\/click\/camref:[^\/]+)(\/pubref:([^\/]+)\/)?/;

const HANDLERS = {};

def('a8', byParameter('id1'));
def('adcell', byAppending(ADCELL_MATCH, '/subid/{{SubId}}'));
def('admitad', byParameter('subid'));
def('affiliatewindow', byParameter('clickref'));
def('affilinet', byParameter('subid'), '-at', '-ch', '-de', '-es', '-fr', '-nl', '-uk');
def('afilio', byParameter('aff_xtra'));
def('avantlink', byParameter('ctc'), '-us', '-ca');
def('belboon', byAppending(BELBOON_MATCH, '/subid={{SubId}}/'));
def('commissionfactory', byParameter('UniqueId'));
def('commissionjunction', byParameter('sid'), '-us', '-eu');
def('fan', byParameter('s2'));
def('hasoffers', byParameter('aff_sub'), 'vcommission', 'shopstylers', 'snapdeal');
def('impactradius', byParameter('SubId1'), 'apdperformance');
def('linkshare', byParameter('u1'));
def('lomadee', byParameter('mdasc'));
def('omgpm', byParameter('UID'), '-asia', '-india', '-australia', '-brazil', '-uk');
def('partnerads', byParameter('uid'));
def('pepperjam', byParameter('sid'));
def('shoogloo', byParameter('s2'));
def('performancehorizon', byAppending(PHG_MATCH, '/pubref:{{SubId}}'));
def('publicideas', byParameter('cb'), '-fr', '-it', '-es', '-latam', '-uk');
def('shareasale', byParameter('afftrack'));
def('tradedoubler', fixTradeDoubler);
//def('tradetracker', byParameter('r'), '-at', '-ch', '-cz', '-de', '-dk', '-es', '-fi', '-fr', '-gb', '-no', '-ru', '-se');
def('tradetracker', fixTradeTracker, '-at', '-ch', '-cz', '-de', '-dk', '-es', '-fi', '-fr', '-it', '-gb', '-no', '-ru', '-se');
def('webgains', byParameter('clickref'));
def('zanox', fixZanox);
def('jumia', byParameter('s2'));
def('adtraction', byParameter('epi'));

function def(network, handler) {
  const A = [].slice.call(arguments);
  const variants = A.slice(2);
  HANDLERS[network] = handler;
  variants.forEach(variant => {
    const key = variant.indexOf('-') === 0 ? (network + variant) : variant;
    HANDLERS[key] = handler;
  });
}

function sanitizeTradeDoublerURL(s_url){

  if(!s_url) return '';

  // remove extid, epi & afsrc params from the url (this is in case the params were incorrectly added)
  s_url = s_url.replace(/extid\([^\)]+\)/, '');
  s_url = s_url.replace(/extid=\{[^\)]+\}/, '');
  s_url = s_url.replace(/exttype\([^\)]+\)/, '');
  s_url = s_url.replace(/exttype=\{[^\)]+\}/, '');

  s_url = s_url.replace(/epi\([^\)]+\)/, '');
  s_url = s_url.replace(/epi=\{[^\)]+\}/, '');

  s_url = s_url.replace(/afsrc\([^\)]+\)/, '');
  s_url = s_url.replace(/afsrc=1/, '');

  // add extid, epi & afsrc back to url with correct syntax
  if(!_.includes(s_url, 'extid({{SubId}})')){
    s_url += 'extid({{SubId}})exttype(0)';
  }

  if(!_.includes(s_url, 'epi({{SubId}})')){
    s_url += 'epi({{SubId}})';
  }

  if(!_.includes(s_url, 'afsrc(1)')){
    s_url += 'afsrc(1)';
  }

  //s_url = s_url.replace('&', ''); // this can cause issues for value of url queryparam
  s_url = s_url.replace('()', '');
  return s_url;
}

function fixTradeDoubler(s_url) {

  if (/p=\d+/.test(s_url)) {

    //return byParameter('epi')(s_url); // old code

    // convert all query params with '=' assignment to '()'
    var urlParsed = url.parse(s_url);
    var queryParams = querystring.parse(urlParsed.query);
    var updateQueryParams = '';
    for(var queryParam in queryParams) {
      updateQueryParams += queryParam + '(' + queryParams[queryParam] + ')';
    }

    // assemble the url back
    s_url = urlParsed.protocol + '//' + urlParsed.host + urlParsed.pathname + '?' + updateQueryParams;
    return sanitizeTradeDoublerURL(s_url);
  } else if (/p\(\d+\)/.test(s_url)) {

    //return s_url.replace(/epi\([^\)]+\)/, '') + 'epi({{SubId}})'; // old code

    return sanitizeTradeDoublerURL(s_url);
  }

  return '';
}

// There are 2 ways the links are generated for tradetracker
function fixTradeTracker(s_url) {
  // 1. standardlinking (pointing to tc.tradetracker) the r= variable is used for the reference.
  if (/tc\.tradetracker\.net/.test(s_url) || /\&tt=/.test(s_url)) {
    //console.log(">>>>> URL[tc.tradetracker.net] : " + byParameter('r')(s_url));
    return byParameter('r')(s_url);
  } // 2. directlinking technique (pointing to the advertiserâ€™s site directly) has the reference behind the 3rd underscore.
  else if (/\?tt=/.test(s_url)) {
    var tempUrl = byParameter('r')(s_url);
    //tempUrl = tempUrl.replace('?afsrc=1&tt=', '?tt=');
    tempUrl = tempUrl.replace('&r={{SubId}}', '{{SubId}}&r=');
    //console.log(">>>>> URL[?tt=] : " + tempUrl);
    return tempUrl;
  }
  //console.log(">>>>> URL : Empty");
  return '';
}

function fixZanox(s_url) {
  return byParameter('zpar0')(s_url).replace(/\?([a-zA-Z0-9]+)=&/, '?$1&');
  // s_url = byParameter('zpar0')(s_url);
  // s_url = s_url.replace(/\?([a-zA-Z0-9]+)=&/, '?$1&');
  // return s_url;
}

function byAppending(regex, appendedSubid) {
  return function(s_url) {
    if (!s_url) return '';
    const m = s_url.match(regex);
    if (!m) return '';
    const base = m[1];
    const subidSegment = m[2];
    const subidValue = m[3];
    if (subidSegment && subidValue === '{{SubId}}') return s_url;
    return base + appendedSubid;
  };
}

function byParameter(s_param) {
  return function(s_url) {
    if (!s_url) return "";
    // can't directly put {{SubId}} in at this stage because it'll get url encoded
    const tmpValue = 'OMINTO_SUBID_REPLACEMENT_STRING_' + Math.random().toString(36).slice(-12).toUpperCase() + '_OMINTO_SUBID';
    const parsed = url.parse(s_url);
    const query = querystring.parse(parsed.query);

    if (Object.keys(query).filter(x => query[x] === '{{SubId}}').length > 0) {
      return s_url;
    }

    query[s_param] = tmpValue;
    parsed.query = querystring.stringify(query);
    parsed.search = '?' + parsed.query;
    const tmpUrl = url.format(parsed);
    const realUrl = tmpUrl.replace(tmpValue, '{{SubId}}');
    return realUrl;
  };
}

// function to replace special chars in a url to symbol
function replaceSpecialChars(s_url){
  if (!s_url) return "";
  s_url = s_url.replace(/amp%3B/g,'&');
  s_url = s_url.replace(/%3D/g,'=');
  return s_url;
}

function afsrc(s_network, s_url) {

  if (s_url === "") return s_url;

  if (/afsrc(=1|\(1\))/.test(s_url)) return s_url;

  // special exception for tradetracker - skip adding afsrc parameter
  if (/tradetracker-?[a-z]*/ig.test(s_network)) return s_url;

  // special exception for tradedoubler
  if (s_network === 'tradedoubler' && /clk\.tradedoubler\.com\/click\?[p | a ]\(/.test(s_url)) return s_url + "afsrc(1)";

  // special exception for zanox - adding afsrc=1 ahead of all query param is causing
  // an exception on zanox side (mainly 404)
  // if (s_network === 'zanox') return s_url + "&afsrc=1";

  // replacing special chars in url to symbols
  if (s_network === 'omgpm') s_url = replaceSpecialChars(s_url);

  if (s_url.indexOf('?') === -1) {
    return s_url + '?afsrc=1';
  }

  // insert afsrc before the first parameter with an = sign in it
  const matches = /^([^?]+)\?(.+)$/.exec(s_url);
  const base = matches[1];
  const params = matches[2].split('&');
  const newParams = [];
  let added = false;
  for (let i = 0; i < params.length; i++) {
    const param = params[i];
    if (added === false && param.indexOf('=') > -1) {
      newParams.push('afsrc=1');
      added = true;
    }
    newParams.push(param);
  }
  if (!added) newParams.push('afsrc=1');

  const newUrl = base + '?' + newParams.join('&');
  return newUrl;
}

function validateUrl(url){
	if(url.match(/[\w\/\.]+(\.(\w{2,3}))/)){
		return true;
	}
	return false;
}

function addSubIdToTrackingUrl(s_network, s_url) {
  if (!(s_network in HANDLERS)) return '';
  if (!s_url) return '';
  if(!(validateUrl(s_url)))
    return '';
  if (typeof s_url !== 'string') return '';
  const handler = HANDLERS[s_network];
  if(supportsAfsrc(s_network))
    return afsrc(s_network, handler(s_url));
  else
    return handler(s_url);
}

function supportsAfsrc(s_network) {
  if('adtraction' === s_network) { //add all the networks that do not need afsrc url param 
    return false;
  }  
  else {
    return true;
  }
}

module.exports = addSubIdToTrackingUrl;
