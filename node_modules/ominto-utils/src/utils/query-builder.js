'use strict';

var _ = require('lodash');

function _tokenize (str, fn) {
  if (typeof str !== 'string') {
    return str;
  }
  var tokens = str.split(' ');
  var result;
  if (tokens.length > 1) {
    var parts = [];
    for (var token of tokens) {
      parts.push(fn(token));
    }
    result = '(' + parts.join(' OR ') + ')';
  } else {
    result = fn(str);
  }
  return result;
}

function _sanitize (str) {
  return typeof str === 'string' ? str.replace(/([\+\-\&\|\!\(\)\{\}\[\]\^\"\~\*\?\:\\])/g, '\\$1') : str;
}

function _operator (operation, value) {
  var result = '';
  switch (operation) {
    case '$or':
      result = ' OR (' + lucene_builder(value) + ')';
      break;
    case '$and':
      result = ' AND (' + lucene_builder(value) + ')';
      break;
    case '$eq':
      result = _tokenize(value, token => {
        return '+' + _sanitize(token);
      });
      break;
    case '$ne':
      result = _tokenize(value, token => {
        return '-' + _sanitize(token);
      });
      break;
    case '$not':
      result = 'NOT (' + lucene_builder(value) + ')';
      break;
    case '$like':
      result = _tokenize(value, token => {
        token = _sanitize(token);
        return [token, '*' + token + '*'].join(' OR ');
      });
      break;
    default:
  }
  return result;
}

function lucene_builder (query) {
  var result;
  if (_.isObject(query)) {
    result = '';
    _.each(query, function (value, key) {
      if (result) {
        result += ' AND ';
      }
      if (/^\$/.test(key)) {
        result += _operator(key, value);
      } else {
        result += key + ':';
        if (_.isObject(value)) {
          result += lucene_builder(value);
        } else {
          result += value;
        }
      }
    });
  } else {
    result = typeof query === 'string' ? _sanitize(query).split(' ').join(' OR ') : query;
  }
  return '(' + result + ')';
}

module.exports = {
  lucene: lucene_builder
};
