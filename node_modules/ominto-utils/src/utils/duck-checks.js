'use strict';

var _ = require('lodash');

/**
 * @function checkValues
 *
 * Checks input parameters to ensure that they meet the requirement of the
 * method that duckcheck is called in.
 *
 * @param {Array} vals - An array of the values to be checked.
 * @param {Array} checks - An array of functions to perform checks of the
 * arguments.
 * @returns {boolean} Result of the check, if any fail then it immediately
 * stops checking and returns false.
 *
 */
function checkValues (vals, checks) {
  var pass = true;
  _.each(vals, function (val, index) {
    pass = checks[index](val);
    return pass;
  });
  return pass;
}

/**
 * @function stringCheck
 *
 * Performs a check on a string to ensure that it is not null or empty.
 *
 * @param {string} string - The string to check.
 * @returns {boolean} Result of the check.
 *
 */
function stringCheck (string) {
  return _.isString(string) && string.length > 0;
}

/**
 * @function booleanCheck
 *
 * Performs a check on a value to ensure that it is classified as a boolean.
 *
 * @param {object} valueToCheck - The string to check.
 * @returns {boolean} Result of the check.
 *
 */
function booleanCheck (valueToCheck) {
  return _.isBoolean(valueToCheck);
}

/**
 * @function objectCheck
 *
 * Performs a check on an object to ensure that it is not null, not a function
 * and not an array.
 * @param {object} value - The object to check.
 * @returns {boolean} Result of the check.
 *
 */
function objectCheck (value) {
  return _.isObject(value) && !_.isNull(value) && !_.isFunction(value) && !_.isArray(value);
}

/**
 * @function stringOrNumberCheck
 *
 * Performs a check on a value to make sure that it is a non empty string or a
 * number.
 *
 * @param {object} value - The value to check.
 * @returns {boolean} Result of the check.
 *
 */
function stringOrNumberCheck (value) {
  return _.isString(value) && value.length > 0 || _.isNumber(value);
}

/**
 * @function keyCheck
 *
 * Performs a check on an object to ensure that it is not null, not a function
 * and is either a string or object.
 * @param {object} value - The object to check.
 * @returns {boolean} Result of the check.
 *
 */
function keyCheck (value) {
  return stringCheck(value) || objectCheck(value) && !_.isNull(value) && !_.isFunction(value);
}

/**
 * @function amountCheck
 *
 * Performs a check on a parameter to ensure that it is a proper number.
 *
 * @param {string} string - The string to check.
 * @returns {boolean} Result of the check.
 *
 */
function amountCheck (number) {
  return _.isFinite(number) && number > 0;
}

/**
 * @function optionsCheck
 *
 * Performs a check on an options object to check that it is either null or
 * that it is an object that meets the requirements of the options argument.
 * @param {object} value - The object to check.
 * @returns {boolean} Result of the check.
 *
 */
function optionsCheck (value) {
  return _.isNull(value) || objectCheck(value);
}

/**
 * @function recipientTypeCheck
 *
 * Performs a check on a recipient type to ensure that it is a string containing
 * only valid values of EMAIL, PHONE or PAYPAL_ID
 *
 * @param {string} string - The string to check.
 * @returns {boolean} Result of the check.
 *
 */
function recipientTypeCheck (string) {
  var validValues = ['EMAIL', 'PHONE', 'PAYPAL_ID'];
  return _.isString(string) && _.includes(validValues, string);
}

module.exports = {
  checkValues: checkValues,
  stringCheck: stringCheck,
  booleanCheck: booleanCheck,
  objectCheck: objectCheck,
  stringOrNumberCheck: stringOrNumberCheck,
  keyCheck: keyCheck,
  amountCheck: amountCheck,
  optionsCheck: optionsCheck,
  recipientTypeCheck: recipientTypeCheck
};
