'use strict';
var AWS = require('aws-sdk');
var firehose;
var bunyan = require('bunyan');
var _ = require('lodash');

const MAX_RECORD_SIZE = 1024000; // 1000 KB per http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Firehose.html
const MAX_TOTAL_SIZE = 4096000; //4MB per above
const MAX_ENTRIES = 100;
const FLUSH_INTERVAL = 1000;

var entries = [];
var entriesLength = 0;

var interval;
var initialized = false;

const PROD_STREAM_NAME = 'prod-server-logs';
const DEV_STREAM_NAME = 'dev-logs';
var deliveryStreamName = 'server-logs';

function flush () {
  return new Promise((resolve, reject) => {
    if (!entries.length) {
      resolve();
      return;
    }
    var _entries = entries;
    entries = [];
    entriesLength = 0;
    firehose.putRecordBatch({
      DeliveryStreamName: deliveryStreamName,
      Records: _entries.map(entry => ({
        Data: entry
      }))
    }, function (err) {
      if (err) {
        console.log("Error writing logs to firehose: ", err.message, err.stack);
        reject(err);
      } else {
        resolve(err);
      }
    });
  });
}

var writer = Object.freeze({
  write: function (str) {
    if (str.length > MAX_RECORD_SIZE) {
      str = str.slice(0, MAX_RECORD_SIZE);
    }
    if (entriesLength + str.length > MAX_TOTAL_SIZE) {
      flush();
    }
    entries.push(str);
    entriesLength += str.length;
    if (entries.length >= MAX_ENTRIES) {
      flush();
    }
  }
});

function createLogger (options, env) {
  if (!firehose) {
    initialize(configs);
  }
  if (env && env === 'prod') {
    //Would be good for this to be in initialize, but need to be sure that
    //this happens even if it has been initialized badly.
    deliveryStreamName = PROD_STREAM_NAME;
  }
  if (env && env === 'dev') {
    deliveryStreamName = DEV_STREAM_NAME;
  }
  options = _.clone(options);
  var level = options.level || bunyan.INFO;
  if (!options.streams) {
    options.streams = [];
  }
  if (options.stream) {
    var toPick = ['stream', 'level'];
    options.streams.push(_.pick(options, toPick));
    options = _.omit(options, toPick);
  }
  options.streams.push({
    stream: writer,
    level: level
  });
  var logger = bunyan.createLogger(options);
  logger.flush = flush;
  return logger;
}

function setFlushInterval (timeInMs) {
  clearInterval(interval);
  interval = setInterval(function () {
    try {
      flush();
    } catch (err) {
      console.log("Error flushing logs to firehose: ", err.message, err.stack);
    }
  }, timeInMs);
}

function initialize (config) {
  if (!initialized) {
    initialized = true;
    firehose = new AWS.Firehose({
      region: _.get(config, ['aws', 'default_region'], 'us-east-1')
    });
    setFlushInterval(FLUSH_INTERVAL);
  }
}

module.exports = {
  createLogger: createLogger,
  setFlushInterval: setFlushInterval,
  initialize: initialize,
  flush: flush
};
