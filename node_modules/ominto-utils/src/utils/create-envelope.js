'use strict';

const uuid = require('node-uuid');

/**
 * @function createEnvelope
 *
 * Creates an object containing the necessary information for a kinesis event.
 *
 * @param {string} s_type - The type of stream that the kinesis event will be
 * sent to.
 *
 * @param {object} o_jwt - The json web token associated with the event.
 *
 * @param {object} o_data - The primary data for the event.
 *
 * @param {object} o_flags - Any flags that are pertinent for this event
 * (idempotent etc...)
 *
 * @param {object} a_trigger - An array of trigger objecst, containing useful information
 * about who triggered the event and from where.
 *
 * @returns {object} An envelope object that can be used by kinesis.
 */
function createEnvelope (s_type, o_jwt, o_data, o_flags, a_trigger) {
  return {
    id: uuid.v4(),
    type: s_type,
    timestamp: Date.now(),
    jwt: o_jwt,
    trigger: a_trigger,
    data: o_data,
    flags: o_flags
  };
}

/**
 * @function createEnvelopeFromLogger
 *
 * Creates an object containing the necessary information for a kinesis event.
 *
 * @param {string} s_type - The type of stream that the kinesis event will be
 * sent to.
 *
 * @param {object} o_jwt - The json web token associated with the event.
 *
 * @param {object} o_data - The primary data for the event.
 *
 * @param {object} o_flags - Any flags that are pertinent for this event
 * (idempotent etc...)
 *
 * @param {object} o_logger - The logger which contains the necessary information
 * to create a trigger.
 *
 * @returns {object} An envelope object that can be used by kinesis.
 */
function createEnvelopeFromLogger (s_type, o_jwt, o_data, o_flags, o_logger) {
  let a_trigger = createTriggerFromLogger(o_logger);
  return createEnvelope(s_type, o_jwt, o_data, o_flags, a_trigger);
}

/**
 *@function createTrigger
 *
 * Converts/constructs the trigger as an array.
 *
 * @param {string} ip - The ip the request originated from
 *
 * @param {string} reqId - The unique request identifier associated with this request
 *
 * @param {string} sessionId - The unique session identifier associated with this request
 *
 * @param {string} method - The method associated with this request
 *
 * @param {string} path - The path associated with this request
 *
 * @param {string} querystring - The querystring associated with this request
 *
 * @param {string} reqBody - The request body associated with this request
 *
 * @returns {array} A trigger as an array for a kinesis stream.
 */
function createTrigger (ip, reqId, sessionId, method, path, querystring, reqBody) {
  let trigger = {
    ip: ip,
    req_id: reqId,
    session_id: sessionId,
    method: method,
    path: path,
    querystring: querystring,
    req_body: reqBody,
    timestamp: Date.now()
  };
  return trigger ? [trigger] : [];
}

function createTriggerFromLogger (logger) {
  let a_trigger = [];
  if (logger && logger.fields) {
    a_trigger = createTrigger(logger.fields.ip, logger.fields.req_id, logger.fields.session_id, logger.fields.method, logger.fields.path, logger.fields.querystring, logger.fields.req_body);
  }
  return a_trigger;
}

function createTriggerFromLambdaPayload (eventType, data, reqId, sessionId) {
  return createTrigger(null, reqId, sessionId, 'aws-lambda-function', eventType, null, data);
}

function createTriggerFromTaskbox (taskName) {
  return createTrigger(null, null, null, 'taskbox', taskName, null, null);
}

module.exports = {
  createEnvelope: createEnvelope,
  fromLogger: createEnvelopeFromLogger,
  createTrigger: createTrigger,
  createTriggerFromLogger: createTriggerFromLogger,
  createTriggerFromLambdaPayload: createTriggerFromLambdaPayload,
  createTriggerFromTaskbox: createTriggerFromTaskbox
};
