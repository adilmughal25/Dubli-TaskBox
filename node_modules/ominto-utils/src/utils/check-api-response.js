'use strict';

var _ = require('lodash');

// use this with either getDataClient() above or with any other request-promise
// based code (such as ./remote-apis/*) to do something like this:
//
//   response = yield dataClient.get('/some-url/').then(utils.checkApiResponse(201, 'some-url failed!'))
//
// rather than the clunkier alternative:
//   response = yield dataClient.get(url);
//   if (response.statusCode !== 201) {
//      throw new Error('some-url failed!');
//   }
//
// `expected` can take any of the following value types
//   * number: pass the exact status code required
//   * array of numbers: pass a list of allowed status codes
//   * regexp: a regexp matching the allowed status codes
//   * string: a shortcut for regex syntax, useful for passing '2XX' for all
//              200-ish level responses, etc. any X or N in the string is
//              converted to 'any digit'
//   * function: function is called with fn(code,url,response). return a false-y value to reject
//
// if the `expected` field is not sent (ie `checkApiResponse(msg)`), then
// `expected` will default to any 2XX statusCode.
//
// if neither expected or message are passed, the result would be the same as if
// it had been called with checkApiResponse('2XX', 'API Error')
//
// note that this requires the request-promise code to use the following options:
//   * resolveWithFullResponse: true
//   * simple: false
function checkApiResponse (expected, msg) {
  var expectFn;
  if (arguments.length === 1) {
    msg = expected;
    expected = '2XX';
  } else if (arguments.length === 0) {
    msg = 'API Error';
    expected = '2XX';
  }

  if (_.isNumber(expected)) {
    expectFn = code => code === expected;
  } else if (_.isRegExp(expected)) {
    expectFn = code => expected.test(code.toString());
  } else if (_.isArray(expected)) {
    expectFn = code => _.includes(expected, code);
  } else if (_.isFunction(expected)) {
    expectFn = expected;
  } else if (_.isString(expected)) {
    var re = new RegExp('^' + expected.replace(/[XN]/g, '\\d') + '$');
    expectFn = code => re.test(code.toString());
  } else {
    throw new Error("checkApiResponse requires an 'expect' value which is either a Number, String, RegExp, Array, or Function");
  }

  return function (response) {
    var code = response.statusCode;
    var url = response.request.uri.href;
    if (!expectFn(code, url, response)) {
      var body = response.body;
      try {
        if (typeof body !== 'string') body = JSON.stringify(body);
      } catch (e) {
        // ignore?
      }
      var err = msg + ' [url: ' + url + ']';
      err += ' (expected: ' + expected + ', received: ' + response.statusCode + ')';
      err += ': ' + body;
      throw new Error(err);
    }
    return Promise.resolve(response);
  };
}

module.exports = checkApiResponse;
