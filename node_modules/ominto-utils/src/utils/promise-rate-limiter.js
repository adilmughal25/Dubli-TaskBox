'use strict';

var rateLimit = require('rate-limit');
var EventEmitter = require('events').EventEmitter;
var requestMethods = 'get head post put patch del'.split(' ');

/* basic usage:
var limited = limiter(5, 60); // 5 per minute
var start = Date.now();
var _fn = () => Promise.resolve(console.log("running after", Date.now() - start));
for (var i = 0; i < 10; i++) limited(_fn);
*/

function limiter (limit, seconds) {
  var interval = seconds * 1000 / limit | 0;
  var queue = rateLimit.createQueue({interval: interval});
  var enqueue = function (fn) {
    return new Promise(function (resolve, reject) {
      queue.add(function () {
        fn().then(resolve, reject);
      });
    });
  };
  enqueue.queue = queue;
  return enqueue;
}

limiter.request = function (client, limit, seconds) {
  var emitter = new EventEmitter();
  var limited = limiter(limit, seconds); // 1000 per hour
  var runCounter = 0;
  requestMethods.forEach(function (method) {
    var $method = 'unlimited$' + method;
    var orig = client[method];
    client[$method] = orig; // expose non-rate-limited call
    client[method] = function () {
      var args = arguments;
      var url = typeof args[0] === 'string' ? args[0] : args[0].url || args[0].uri;
      var startTime = Date.now();
      var runid = ++runCounter;
      emitter.emit('queue', method, url, args, runid);
      return limited(function () {
        var delayed = Date.now() - startTime;
        emitter.emit('dequeue', method, url, args, runid, delayed);
        return orig.apply(client, args);
      });
    };
  });

  // if you want default debugging output, just pass your debug object into the emitter!
  emitter.debug = function (debug, prefix) {
    var prefixString = '';
    if (prefix) prefixString = '[' + prefix + '] ';
    var qmsg = prefixString + 'queued `%s %s` (request #%s)';
    var dqmsg = prefixString + 'running `%s %s` (request #%s) after %dms';
    emitter.on('queue', (M, U, A, R) => debug(qmsg, M, U, R));
    emitter.on('dequeue', (M, U, A, R, D) => debug(dqmsg, M, U, R, D));
  };

  return emitter;
};

module.exports = limiter;
