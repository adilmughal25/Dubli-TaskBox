'use strict';

var _ = require('lodash');
var url = require('../url');

function _sanitize (response) {
  return response.statusCode === 200 ? response.body : null;
}

function UserModifiers (dataClient) {
  if (this.constructor !== UserModifiers) {
    return new UserModifiers(dataClient);
  }
  if (!dataClient) {
    throw new Error('You must provide a dataClient when instantiating UserModifiers');
  }
  this.dataClient = dataClient;
}

UserModifiers.prototype.getModifiers = function *(userId, merchantId, date, limit) {
  var params = _.omit({
    merchantId: merchantId,
    limit: limit,
    date: date
  }, _.isUndefined);

  return (yield this.dataClient.get({
    url: '/searchModsForUser/' + userId + url.toQueryString(params)
  })).body;
};

UserModifiers.prototype.getBestModifier = function *(userId, merchantId, date) {
  var modifiers = yield this.getModifiers(userId, merchantId, date, 1);
  return modifiers.length > 0 ? modifiers[0] : null;
};

UserModifiers.prototype.redeemBestModifier = function *(userId, merchantId, date, blacklistedTypes) {
  if(blacklistedTypes && !_.isArray(blacklistedTypes)){
    blacklistedTypes = [blacklistedTypes];
  }
  var params = _.omit({
    merchantId: merchantId,
    date: date,
    blacklistedTypes: blacklistedTypes
  }, param => param === undefined || param === null);

  return _sanitize(yield this.dataClient.patch({
    url: '/redeemBestModForUser/' + userId,
    body: params
  }));
};

UserModifiers.prototype.redeemModifierForUser = function *(userId, modId) {
  return yield this.dataClient.patch({
    url: '/redeemModForUser/' + userId,
    body: {
      modId: modId
    }
  });
};

UserModifiers.prototype.redeemModifier = function *(userModId) {
  return yield this.dataClient.patch({
    url: '/redeemMod/' + userModId
  });
};

UserModifiers.prototype.getModByUserId = function *(userId) {
  return _sanitize(yield this.dataClient.get({
    url: '/getModByUserId/' + userId
  }));
};

UserModifiers.prototype.getUserModifier = function *(userModiferId, allowInactive) {
  return _sanitize(yield this.dataClient.get({
    url: '/getUserModifierById/' + userModiferId + (allowInactive ? '?active=both' : '')
  }));
};

UserModifiers.prototype.decrementLifetimeValueRemaining = function * (userModifierId, amount){
  return yield this.dataClient.patch({
    url: '/decrementRemainingValueForUserMod/' + userModifierId,
    body: {
      value: amount
    }
  });
};

module.exports = UserModifiers;
