"use strict";
const userClient = require('../../src/clients/user')(configs);

describe('The user client', function () {

  it('should be an object', function () {
    expect(userClient).to.be.a('object');
  });

  describe('createUser', function () {
    it('should be available as a function', function () {
      expect(userClient.createUser).to.be.a('function');
    });

    it('returns the created user if successful, creating a user_acceptance if a policy_id is in the request', done => {
      co(function*() {
        let createUserRequest = nock(configs.data_api.internalUrl).post('/createUser/').reply(201, {id: 'testUserId'})
        .post('/createUserAcceptance').reply(201);
        let actual = yield userClient.createUser({id: 'testUserId', policy_id: 1}, mock_koa);
        expect(actual).to.eql({id: 'testUserId'});
        createUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns the created user if successful, not creating a user_acceptance if no policy_id is given', done => {
      co(function*() {
        let createUserRequest = nock(configs.data_api.internalUrl).post('/createUser/').reply(201, {id: 'testUserId'});
        let actual = yield userClient.createUser({id: 'testUserId'}, mock_koa);
        expect(actual).to.eql({id: 'testUserId'});
        createUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with identifying internalCode and duplicateKey of true if data returns a 400 with a body code of ER_DUP_ENTRY', done => {
      // TODO: update data contract -- something cleaner than SQL messages coming back from data
      let createUserRequest = nock(configs.data_api.internalUrl).post('/createUser/').reply(400, {code: 'ER_DUP_ENTRY'});
      co(function*() {
        yield userClient.createUser({id: 'testUserId'}, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(52);
        expect(err.message).to.equal('Unique field already in use');
        expect(err.duplicateKey).to.be.true;
        createUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let createUserRequest = nock(configs.data_api.internalUrl).post('/createUser/').reply(500);
      co(function*() {
        yield userClient.createUser({id: 'testUserId'}, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userObject).to.eql({id: 'testUserId'});
        expect(err.message).to.equal('Unexpected result from data service during createUser');
        createUserRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('patchUser', function () {

    it('should be available as a function', function () {
      expect(userClient.patchUser).to.be.a('function');
    });

    it('returns nothing if successful', done => {
      co(function*() {
        let patchUserRequest = nock(configs.data_api.internalUrl).patch('/patchUser/userId/').reply(204);
        let actual = yield userClient.patchUser('userId', {fieldToUpdate: 'newValue'}, mock_koa);
        expect(actual).to.be.undefined;
        patchUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with identifying internalCode and duplicateKey of true if data returns a 400 with a body code of ER_DUP_ENTRY', done => {
      // TODO: update data contract -- something cleaner than SQL messages coming back from data
      let patchUserRequest = nock(configs.data_api.internalUrl).patch('/patchUser/userId/').reply(400, {code: 'ER_DUP_ENTRY'});
      co(function*() {
        yield userClient.patchUser('userId', {fieldToUpdate: 'newValue'}, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(52);
        expect(err.message).to.equal('Unique field already in use');
        expect(err.duplicateKey).to.be.true;
        patchUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let patchUserRequest = nock(configs.data_api.internalUrl).patch('/patchUser/userId/').reply(500);
      co(function*() {
        yield userClient.patchUser('userId', {fieldToUpdate: 'newValue'}, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userId).to.eql('userId');
        expect(err.userFields).to.eql({fieldToUpdate: 'newValue'});
        expect(err.message).to.equal('Unexpected result from data service during patchUser');
        patchUserRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserById', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserById).to.be.a('function');
    });

    it('returns the user associated with the id', done => {
      co(function*() {
        let getUserByIdRequest = nock(configs.data_api.internalUrl).get('/getUserById/userId/').reply(200, {id: 'userId'});
        let actual = yield userClient.getUserById('userId', false, mock_koa);
        expect(actual).to.eql({id: 'userId'});
        getUserByIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let getUserByIdRequest = nock(configs.data_api.internalUrl).get('/getUserById/userId/').reply(404);
      co(function*() {
        yield userClient.getUserById('userId', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(110);
        expect(err.message).to.equal('User not found');
        getUserByIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserByIdRequest = nock(configs.data_api.internalUrl).get('/getUserById/userId/').reply(500);
      co(function*() {
        yield userClient.getUserById('userId', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userId).to.eql('userId');
        expect(err.message).to.equal('Unexpected result from data service during getUserById');
        getUserByIdRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserByEmail', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserByEmail).to.be.a('function');
    });

    it('returns the userid associated to the given email', done => {
      co(function*() {
        let getUserByEmailRequest = nock(configs.data_api.internalUrl).get('/getUserByEmail/?whitelabel=ominto&email=test%40test.com').reply(200, {id: 'userId'});
        let actual = yield userClient.getUserByEmail('ominto', 'test@test.com', false, mock_koa);
        expect(actual).to.eql({id: 'userId'});
        getUserByEmailRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let getUserByEmailRequest = nock(configs.data_api.internalUrl).get('/getUserByEmail/?whitelabel=ominto&email=test%40test.com').reply(404);
      co(function*() {
        yield userClient.getUserByEmail('ominto', 'test@test.com', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(111);
        expect(err.message).to.equal('User not found');
        getUserByEmailRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserByEmailRequest = nock(configs.data_api.internalUrl).get('/getUserByEmail/?whitelabel=ominto&email=test%40test.com').reply(500);
      co(function*() {
        yield userClient.getUserByEmail('ominto', 'test@test.com', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.whitelabel).to.eql('ominto');
        expect(err.email).to.eql('test@test.com');
        expect(err.message).to.equal('Unexpected result from data service during getUserByEmail');
        getUserByEmailRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserByPhoneNumber', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserByPhoneNumber).to.be.a('function');
    });

    it('returns the user associated with the phone number', done => {
      co(function*() {
        let getUserByPhoneNumberRequest = nock(configs.data_api.internalUrl).get('/getUserByPhoneNumber/?whitelabel=ominto&phone=5036556655').reply(200, {user: 'values'});
        let actual = yield userClient.getUserByPhoneNumber('ominto', '5036556655', false, mock_koa);
        expect(actual).to.eql({user: 'values'});
        getUserByPhoneNumberRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let getUserByPhoneNumberRequest = nock(configs.data_api.internalUrl).get('/getUserByPhoneNumber/?whitelabel=ominto&phone=5036556655').reply(404);
      co(function*() {
        yield userClient.getUserByPhoneNumber('ominto', '5036556655', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(111);
        expect(err.message).to.equal('User not found');
        getUserByPhoneNumberRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserByPhoneNumberRequest = nock(configs.data_api.internalUrl).get('/getUserByPhoneNumber/?whitelabel=ominto&phone=5036556655').reply(500);
      co(function*() {
        yield userClient.getUserByPhoneNumber('ominto', '5036556655', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.whitelabel).to.eql('ominto');
        expect(err.phone).to.eql('5036556655');
        expect(err.message).to.equal('Unexpected result from data service during getUserByPhoneNumber');
        getUserByPhoneNumberRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserByFacebookId', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserByFacebookId).to.be.a('function');
    });

    it('returns the user associated with the facebook id', done => {
      co(function*() {
        let getUserByFacebookIdRequest = nock(configs.data_api.internalUrl).get('/getUserByFacebookId/?whitelabel=ominto&facebookid=123456').reply(200, {user: 'values'});
        let actual = yield userClient.getUserByFacebookId('ominto', '123456', false, mock_koa);
        expect(actual).to.eql({user: 'values'});
        getUserByFacebookIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let getUserByFacebookIdRequest = nock(configs.data_api.internalUrl).get('/getUserByFacebookId/?whitelabel=ominto&facebookid=123456').reply(404);
      co(function*() {
        yield userClient.getUserByFacebookId('ominto', '123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(111);
        expect(err.message).to.equal('User not found');
        getUserByFacebookIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserByFacebookIdRequest = nock(configs.data_api.internalUrl).get('/getUserByFacebookId/?whitelabel=ominto&facebookid=123456').reply(500);
      co(function*() {
        yield userClient.getUserByFacebookId('ominto', '123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.whitelabel).to.eql('ominto');
        expect(err.facebookId).to.eql('123456');
        expect(err.message).to.equal('Unexpected result from data service during getUserByFacebookId');
        getUserByFacebookIdRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserByTwitterId', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserByTwitterId).to.be.a('function');
    });

    it('returns the user associated with the twitter id', done => {
      co(function*() {
        let getUserByTwitterIdRequest = nock(configs.data_api.internalUrl).get('/getUserByTwitterId/?whitelabel=ominto&twitterid=123456').reply(200, {user: 'values'});
        let actual = yield userClient.getUserByTwitterId('ominto', '123456', false, mock_koa);
        expect(actual).to.eql({user: 'values'});
        getUserByTwitterIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let getUserByTwitterIdRequest = nock(configs.data_api.internalUrl).get('/getUserByTwitterId/?whitelabel=ominto&twitterid=123456').reply(404);
      co(function*() {
        yield userClient.getUserByTwitterId('ominto', '123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(111);
        expect(err.message).to.equal('User not found');
        getUserByTwitterIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserByTwitterIdRequest = nock(configs.data_api.internalUrl).get('/getUserByTwitterId/?whitelabel=ominto&twitterid=123456').reply(500);
      co(function*() {
        yield userClient.getUserByTwitterId('ominto', '123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.whitelabel).to.eql('ominto');
        expect(err.twitterId).to.eql('123456');
        expect(err.message).to.equal('Unexpected result from data service during getUserByTwitterId');
        getUserByTwitterIdRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserByGoogleId', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserByGoogleId).to.be.a('function');
    });

    it('returns the user associated with the google id', done => {
      co(function*() {
        let getUserByGoogleIdRequest = nock(configs.data_api.internalUrl).get('/getUserByGoogleId/?whitelabel=ominto&googleid=123456').reply(200, {user: 'values'});
        let actual = yield userClient.getUserByGoogleId('ominto', '123456', false, mock_koa);
        expect(actual).to.eql({user: 'values'});
        getUserByGoogleIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let getUserByGoogleIdRequest = nock(configs.data_api.internalUrl).get('/getUserByGoogleId/?whitelabel=ominto&googleid=123456').reply(404);
      co(function*() {
        yield userClient.getUserByGoogleId('ominto', '123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(111);
        expect(err.message).to.equal('User not found');
        getUserByGoogleIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserByGoogleIdRequest = nock(configs.data_api.internalUrl).get('/getUserByGoogleId/?whitelabel=ominto&googleid=123456').reply(500);
      co(function*() {
        yield userClient.getUserByGoogleId('ominto', '123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.whitelabel).to.eql('ominto');
        expect(err.googleId).to.eql('123456');
        expect(err.message).to.equal('Unexpected result from data service during getUserByGoogleId');
        getUserByGoogleIdRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserPoints', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserPoints).to.be.a('function');
    });

    it('returns the points value for the user associated to the userId', done => {
      co(function*() {
        let getUserPointsRequest = nock(configs.data_api.internalUrl).get('/getUserPoints/userId/').reply(200, {points: 'values'});
        let actual = yield userClient.getUserPoints('userId', false, mock_koa);
        expect(actual).to.eql({points: 'values'});
        getUserPointsRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 500', done => {
      let getUserPointsRequest = nock(configs.data_api.internalUrl).get('/getUserPoints/userId/').reply(500);
      co(function*() {
        yield userClient.getUserPoints('userId', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.userId).to.equal('userId');
        expect(err.message).to.equal('Unexpected result from data service during getUserPoints');
        getUserPointsRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserPointsBalance', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserPointsBalance).to.be.a('function');
    });

    it('returns the points balance for the user associated to the userId if they have points', done => {
      co(function*() {
        let getUserPointsBalanceRequest = nock(configs.data_api.internalUrl).get('/getUserPointsBalance/userId/').reply(200, {total: 1000});
        let actual = yield userClient.getUserPointsBalance('userId', false, mock_koa);
        expect(actual).to.eql(1000);
        getUserPointsBalanceRequest.done();
        done();
      }).catch(done);
    });

    it('returns zero if no point total is returned for the user', done => {
      co(function*() {
        let getUserPointsBalanceRequest = nock(configs.data_api.internalUrl).get('/getUserPointsBalance/userId/').reply(200, {});
        let actual = yield userClient.getUserPointsBalance('userId', false, mock_koa);
        expect(actual).to.eql(0);
        getUserPointsBalanceRequest.done();
        done();
      }).catch(done);
    });

    it('returns zero if a null userid is passed and does not make a call to data', done => {
      co(function*() {
        let actual = yield userClient.getUserPointsBalance(null, false, mock_koa);
        expect(actual).to.eql(0);
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 500', done => {
      let getUserPointsBalanceRequest = nock(configs.data_api.internalUrl).get('/getUserPointsBalance/userId/').reply(500);
      co(function*() {
        yield userClient.getUserPointsBalance('userId', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.userId).to.equal('userId');
        expect(err.message).to.equal('Unexpected result from data service during getUserPointsBalance');
        getUserPointsBalanceRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserFromDeviceId', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserFromDeviceId).to.be.a('function');
    });

    it('returns the user associated with the device id', done => {
      co(function*() {
        let getUserFromDeviceIdRequest = nock(configs.data_api.internalUrl).get('/getUserFromDeviceId/123456/').reply(200, {user: 'values'});
        let actual = yield userClient.getUserFromDeviceId('123456', false, mock_koa);
        expect(actual).to.eql({user: 'values'});
        getUserFromDeviceIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let getUserFromDeviceIdRequest = nock(configs.data_api.internalUrl).get('/getUserFromDeviceId/123456/').reply(404);
      co(function*() {
        yield userClient.getUserFromDeviceId('123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(112);
        expect(err.message).to.equal('User not found');
        getUserFromDeviceIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserFromDeviceIdRequest = nock(configs.data_api.internalUrl).get('/getUserFromDeviceId/123456/').reply(500);
      co(function*() {
        yield userClient.getUserFromDeviceId('123456', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.deviceId).to.eql('123456');
        expect(err.message).to.equal('Unexpected result from data service during getUserFromDeviceId');
        getUserFromDeviceIdRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('saveActivationCode', function () {

    it('should be available as a function', function () {
      expect(userClient.saveActivationCode).to.be.a('function');
    });

    it('returns the response body from data if successful', done => {
      co(function*() {
        let saveActivationCodeRequest = nock(configs.data_api.internalUrl).post('/saveActivationCode/activationCode/').reply(201, {activationCode: 'value'});
        let actual = yield userClient.saveActivationCode('activationCode', 'userId', mock_koa);
        expect(actual).to.eql({activationCode: 'value'});
        saveActivationCodeRequest.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 400', done => {
      co(function*() {
        let saveActivationCodeRequest = nock(configs.data_api.internalUrl).post('/saveActivationCode/activationCode/').reply(400);
        let actual = yield userClient.saveActivationCode('activationCode', 'userId', mock_koa);
        expect(actual).to.be.null;
        saveActivationCodeRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let saveActivationCodeRequest = nock(configs.data_api.internalUrl).post('/saveActivationCode/activationCode/').reply(500);
      co(function*() {
        yield userClient.saveActivationCode('activationCode', 'userId', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.activationCode).to.eql('activationCode');
        expect(err.message).to.equal('Unable to save activation code');
        saveActivationCodeRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getUserIdFromActivationCode', function () {

    it('should be available as a function', function () {
      expect(userClient.getUserIdFromActivationCode).to.be.a('function');
    });

    it('returns the user associated with the device id', done => {
      co(function*() {
        let getUserIdFromActivationCodeRequest = nock(configs.data_api.internalUrl).get('/getUserIdFromActivationCode/123456/').reply(200, {user: 'values'});
        let actual = yield userClient.getUserIdFromActivationCode('123456', mock_koa);
        expect(actual).to.eql({user: 'values'});
        getUserIdFromActivationCodeRequest.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 400', done => {
      let getUserIdFromActivationCodeRequest = nock(configs.data_api.internalUrl).get('/getUserIdFromActivationCode/123456/').reply(400);
      co(function*() {
        let actual = yield userClient.getUserIdFromActivationCode('123456', mock_koa);
        expect(actual).to.be.null;
        getUserIdFromActivationCodeRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserIdFromActivationCodeRequest = nock(configs.data_api.internalUrl).get('/getUserIdFromActivationCode/123456/').reply(500);
      co(function*() {
        yield userClient.getUserIdFromActivationCode('123456', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(20);
        expect(err.res).to.exist;
        expect(err.activationCode).to.eql('123456');
        expect(err.message).to.equal('Activation code is invalid');
        getUserIdFromActivationCodeRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('saveGoogleStateToken', function () {

    it('should be available as a function', function () {
      expect(userClient.saveGoogleStateToken).to.be.a('function');
    });

    it('returns the response body from data if successful', done => {
      co(function*() {
        let saveGoogleStateTokenRequest = nock(configs.data_api.internalUrl).post('/saveGoogleStateToken/token/').reply(201, {token: 'value'});
        let actual = yield userClient.saveGoogleStateToken('token', 'value', mock_koa);
        expect(actual).to.eql({token: 'value'});
        saveGoogleStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 400', done => {
      co(function*() {
        let saveGoogleStateTokenRequest = nock(configs.data_api.internalUrl).post('/saveGoogleStateToken/token/').reply(400);
        let actual = yield userClient.saveGoogleStateToken('token', 'value', mock_koa);
        expect(actual).to.be.null;
        saveGoogleStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let saveGoogleStateTokenRequest = nock(configs.data_api.internalUrl).post('/saveGoogleStateToken/token/').reply(500);
      co(function*() {
        yield userClient.saveGoogleStateToken('token', 'value', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.token).to.eql('token');
        expect(err.value).to.eql('value');
        expect(err.message).to.equal('Unable to save google state token');
        saveGoogleStateTokenRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('saveTwitterStateToken', function () {

    it('should be available as a function', function () {
      expect(userClient.saveTwitterStateToken).to.be.a('function');
    });

    it('returns the response body from data if successful', done => {
      co(function*() {
        let saveTwitterStateTokenRequest = nock(configs.data_api.internalUrl).post('/saveTwitterStateToken/token/').reply(201, {token: 'value'});
        let actual = yield userClient.saveTwitterStateToken('token', 'value', mock_koa);
        expect(actual).to.eql({token: 'value'});
        saveTwitterStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 400', done => {
      co(function*() {
        let saveTwitterStateTokenRequest = nock(configs.data_api.internalUrl).post('/saveTwitterStateToken/token/').reply(400);
        let actual = yield userClient.saveTwitterStateToken('token', 'value', mock_koa);
        expect(actual).to.be.null;
        saveTwitterStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let saveTwitterStateTokenRequest = nock(configs.data_api.internalUrl).post('/saveTwitterStateToken/token/').reply(500);
      co(function*() {
        yield userClient.saveTwitterStateToken('token', 'value', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.token).to.eql('token');
        expect(err.value).to.eql('value');
        expect(err.message).to.equal('Unable to save Twitter state token');
        saveTwitterStateTokenRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getGoogleStateToken', function () {

    it('should be available as a function', function () {
      expect(userClient.getGoogleStateToken).to.be.a('function');
    });

    it('returns the response body from data if successful', done => {
      co(function*() {
        let getGoogleStateTokenRequest = nock(configs.data_api.internalUrl).get('/getGoogleStateToken/token/').reply(200, {value: 'secret'});
        let actual = yield userClient.getGoogleStateToken('token', mock_koa);
        expect(actual).to.eql({value: 'secret'});
        getGoogleStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 400', done => {
      co(function*() {
        let getGoogleStateTokenRequest = nock(configs.data_api.internalUrl).get('/getGoogleStateToken/token/').reply(400);
        let actual = yield userClient.getGoogleStateToken('token', mock_koa);
        expect(actual).to.be.null;
        getGoogleStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getGoogleStateTokenRequest = nock(configs.data_api.internalUrl).get('/getGoogleStateToken/token/').reply(500);
      co(function*() {
        yield userClient.getGoogleStateToken('token', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.token).to.eql('token');
        expect(err.message).to.equal('Google state token is invalid');
        getGoogleStateTokenRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getTwitterStateToken', function () {

    it('should be available as a function', function () {
      expect(userClient.getTwitterStateToken).to.be.a('function');
    });

    it('returns the response body from data if successful', done => {
      co(function*() {
        let getTwitterStateTokenRequest = nock(configs.data_api.internalUrl).get('/getTwitterStateToken/token/').reply(200, {value: 'secret'});
        let actual = yield userClient.getTwitterStateToken('token', mock_koa);
        expect(actual).to.eql({value: 'secret'});
        getTwitterStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 400', done => {
      co(function*() {
        let getTwitterStateTokenRequest = nock(configs.data_api.internalUrl).get('/getTwitterStateToken/token/').reply(400);
        let actual = yield userClient.getTwitterStateToken('token', mock_koa);
        expect(actual).to.be.null;
        getTwitterStateTokenRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getTwitterStateTokenRequest = nock(configs.data_api.internalUrl).get('/getTwitterStateToken/token/').reply(500);
      co(function*() {
        yield userClient.getTwitterStateToken('token', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.token).to.eql('token');
        expect(err.message).to.equal('Twitter state token is invalid');
        getTwitterStateTokenRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('addFavoriteMerchantToUser', function () {

    it('should be available as a function', function () {
      expect(userClient.addFavoriteMerchantToUser).to.be.a('function');
    });

    it('returns nothing if successful', done => {
      co(function*() {
        let addFavoriteMerchantToUserRequest = nock(configs.data_api.internalUrl).patch('/addFavoriteMerchantToUser/').reply(200);
        let actual = yield userClient.addFavoriteMerchantToUser('userId', 'merchantId', mock_koa);
        expect(actual).to.be.undefined;
        addFavoriteMerchantToUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let addFavoriteMerchantToUserRequest = nock(configs.data_api.internalUrl).patch('/addFavoriteMerchantToUser/').reply(404);
      co(function*() {
        yield userClient.addFavoriteMerchantToUser('userId', 'merchantId', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(101);
        expect(err.message).to.equal('Not Found');
        addFavoriteMerchantToUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let addFavoriteMerchantToUserRequest = nock(configs.data_api.internalUrl).patch('/addFavoriteMerchantToUser/').reply(500);
      co(function*() {
        yield userClient.addFavoriteMerchantToUser('userId', 'merchantId', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userId).to.eql('userId');
        expect(err.merchantId).to.eql('merchantId');
        expect(err.message).to.equal('Unexpected result from data service during addFavoriteMerchantToUser');
        addFavoriteMerchantToUserRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('removeFavoriteMerchantFromUser', function () {

    it('should be available as a function', function () {
      expect(userClient.removeFavoriteMerchantFromUser).to.be.a('function');
    });

    it('returns nothing if successful', done => {
      co(function*() {
        let removeFavoriteMerchantFromUserRequest = nock(configs.data_api.internalUrl).patch('/removeFavoriteMerchantFromUser/').reply(200);
        let actual = yield userClient.removeFavoriteMerchantFromUser('userId', 'merchantId', mock_koa);
        expect(actual).to.be.undefined;
        removeFavoriteMerchantFromUserRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let removeFavoriteMerchantFromUserRequest = nock(configs.data_api.internalUrl).patch('/removeFavoriteMerchantFromUser/').reply(500);
      co(function*() {
        yield userClient.removeFavoriteMerchantFromUser('userId', 'merchantId', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userId).to.eql('userId');
        expect(err.merchantId).to.eql('merchantId');
        expect(err.message).to.equal('Unexpected result from data service during removeFavoriteMerchantFromUser');
        removeFavoriteMerchantFromUserRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('markMerchantAsHidden', function () {

    it('should be available as a function', function () {
      expect(userClient.markMerchantAsHidden).to.be.a('function');
    });

    it('returns nothing if successful', done => {
      co(function*() {
        let markMerchantAsHiddenRequest = nock(configs.data_api.internalUrl).patch('/markMerchantAsHidden/').reply(200);
        let actual = yield userClient.markMerchantAsHidden('userId', 'merchantId', mock_koa);
        expect(actual).to.be.undefined;
        markMerchantAsHiddenRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let markMerchantAsHiddenRequest = nock(configs.data_api.internalUrl).patch('/markMerchantAsHidden/').reply(404);
      co(function*() {
        yield userClient.markMerchantAsHidden('userId', 'merchantId', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(101);
        expect(err.message).to.equal('Not Found');
        markMerchantAsHiddenRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let markMerchantAsHiddenRequest = nock(configs.data_api.internalUrl).patch('/markMerchantAsHidden/').reply(500);
      co(function*() {
        yield userClient.markMerchantAsHidden('userId', 'merchantId', mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userId).to.eql('userId');
        expect(err.merchantId).to.eql('merchantId');
        expect(err.message).to.equal('Unexpected result from data service during markMerchantAsHidden');
        markMerchantAsHiddenRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getDwollaAccessToken', function () {

    it('should be available as a function', function () {
      expect(userClient.getDwollaAccessToken).to.be.a('function');
    });

    it('returns the response body from data if successful', done => {
      co(function*() {
        let getDwollaAccessTokenResponse = nock(configs.data_api.internalUrl).get('/getDwollaAccessToken/').reply(200, {accessToken: 'value', refreshToken: 'otherValue'});
        let actual = yield userClient.getDwollaAccessToken(mock_koa);
        expect(actual.body).to.eql({accessToken: 'value', refreshToken: 'otherValue'});
        getDwollaAccessTokenResponse.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 400', done => {
      co(function*() {
        let getDwollaAccessTokenResponse = nock(configs.data_api.internalUrl).get('/getDwollaAccessToken/').reply(400);
        let actual = yield userClient.getDwollaAccessToken(mock_koa);
        expect(actual.body).to.be.undefined;
        getDwollaAccessTokenResponse.done();
        done();
      }).catch(done);
    });
  });

  describe('saveDwollaAccessToken', function () {

    it('should be available as a function', function () {
      expect(userClient.saveDwollaAccessToken).to.be.a('function');
    });

    it('returns the response body from data if successful', done => {
      co(function*() {
        let saveDwollaAccessTokenResponse = nock(configs.data_api.internalUrl).post('/saveDwollaAccessToken/').reply(200);
        let actual = yield userClient.saveDwollaAccessToken({accessToken: 'value', refreshToken: 'otherValue'}, mock_koa);
        expect(actual.statusCode).to.eql(200);
        saveDwollaAccessTokenResponse.done();
        done();
      }).catch(done);
    });
  });

  describe('getAvailablePoliciesForUser', function () {
    let userId = 123;
    let whitelabel = 'ominto';
    let lang = 'en';
    let validDataResponse = [{id: 1}, {id:2}];

    it('should be available as a function', function () {
      expect(userClient.getAvailablePoliciesForUser).to.be.a('function');
    });

    it('returns available policies for a user with given whitelabel and lang', done => {
      co(function*() {
        let getUserByIdRequest = nock(configs.data_api.internalUrl).get('/getAvailablePoliciesForUser/' + userId + '/?whitelabel=' + whitelabel + '&lang=' + lang).reply(200, validDataResponse);
        let actual = yield userClient.getAvailablePoliciesForUser(userId, whitelabel, lang, false, mock_koa);
        expect(actual).to.eql(validDataResponse);
        getUserByIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns available policies for a user with no whitelabel or lang', done => {
      co(function*() {
        let getUserByIdRequest = nock(configs.data_api.internalUrl).get('/getAvailablePoliciesForUser/' + userId + '/').reply(200, validDataResponse);
        let actual = yield userClient.getAvailablePoliciesForUser(userId, null, null, false, mock_koa);
        expect(actual).to.eql(validDataResponse);
        getUserByIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getUserByIdRequest = nock(configs.data_api.internalUrl).get('/getAvailablePoliciesForUser/' + userId + '/?whitelabel=' + whitelabel + '&lang=' + lang).reply(500);
      co(function*() {
        yield userClient.getAvailablePoliciesForUser(userId, whitelabel, lang, false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userId).to.eql(userId);
        expect(err.whitelabel).to.eql(whitelabel);
        expect(err.lang).to.eql(lang);
        expect(err.message).to.equal('Unexpected result from data service during getAvailablePoliciesForUser');
        getUserByIdRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getAcceptedPolicies', function () {
    let userId = 123;
    let mockResponse = [{
      "id": 1,
      "user_id": 1,
      "policy_id": 1,
      "from_ip": "127.0.0.1",
      "from_browser": "Mozilla Firefox",
      "date_accepted": "2015-12-09T12:42:19.000Z"
    }, {
      "id": 2,
      "user_id": 1,
      "policy_id": 2,
      "from_ip": "127.0.0.1",
      "from_browser": "Mozilla Firefox",
      "date_accepted": "2015-12-09T12:42:20.000Z"
    }];

    it('should be available as a function', function () {
      expect(userClient.getAcceptedPolicies).to.be.a('function');
    });

    it('returns accepted policies for a user, not using bypass cache if it was set to false', done => {
      co(function*() {
        let dataFlow = nock(configs.data_api.internalUrl).get('/getAcceptedPolicies/' + userId).reply(200, mockResponse);
        let actual = yield userClient.getAcceptedPolicies(userId, false, mock_koa);
        expect(actual).to.eql(mockResponse);
        dataFlow.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let dataFlow = nock(configs.data_api.internalUrl).get('/getAcceptedPolicies/' + userId).reply(500);
      co(function*() {
        yield userClient.getAcceptedPolicies(userId, false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.userId).to.eql(userId);
        expect(err.message).to.equal('Unexpected result from data service during getAcceptedPolicies');
        dataFlow.done();
        done();
      }).catch(done);
    });
  });
});
