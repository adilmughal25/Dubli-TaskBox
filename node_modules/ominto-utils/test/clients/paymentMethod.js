'use strict';
const paymentMethodClient = require('../../src/clients/paymentMethod')(configs);
(() => {

  describe('paymentMethod', () => {

    describe('createPaymentMethodPayload', () => {
      it('constructs a payment method object merging details and metadata', done => {
        co(function * () {
          let userId = 1;
          let description = 'Email: test@payme.com';
          let type = 'Paypal';
          let direction = 'in';
          let gateway = 'paypal';
          let gatewayId = 'paymentGatewayID';
          let currency = 'usd';
          let metadata = {
            paypal_id: 123,
            paypal_email: 'test@test.com'
          };

          let expected = {
            user_id: userId,
            name: _.startCase(gateway),
            description: description,
            type: type,
            direction: direction,
            gateway: gateway,
            gateway_id: gatewayId,
            currency: currency,
            paypal_id: metadata.paypal_id,
            paypal_email: metadata.paypal_email
          };

          let actual = yield paymentMethodClient.createPaymentMethodPayload(gateway, direction)(userId, description, type, gatewayId, currency, metadata);
          expect(actual).to.eql(expected);
          done();
        }).catch(done);
      });

      it('does not duplicate if it receives duplicate data in metadata', done => {
        co(function * () {
          let userId = 1;
          let description = 'Email: test@payme.com';
          let type = 'Paypal';
          let direction = 'in';
          let gateway = 'paypal';
          let gatewayId = 'paymentGatewayID';
          let currency = 'usd';
          let metadata = {
            description: 'Email: test@payme.com',
            gateway: 'paypal',
            paypal_id: 123,
            paypal_email: 'test@test.com'
          };

          let expected = {
            user_id: userId,
            name: _.startCase(gateway),
            description: description,
            type: type,
            direction: direction,
            gateway: gateway,
            gateway_id: gatewayId,
            currency: currency,
            paypal_id: metadata.paypal_id,
            paypal_email: metadata.paypal_email
          };

          let actual = yield paymentMethodClient.createPaymentMethodPayload(gateway, direction)(userId, description, type, gatewayId, currency, metadata);
          expect(actual).to.eql(expected);
          done();
        }).catch(done);
      });

      it('creates a valid payment method if not given metadata', done => {
        co(function * () {
          let userId = 1;
          let description = 'Email: test@payme.com';
          let type = 'Paypal';
          let direction = 'in';
          let gateway = 'paypal';
          let gatewayId = 'paymentGatewayID';
          let currency = 'usd';

          let expected = {
            user_id: userId,
            name: _.startCase(gateway),
            description: description,
            type: type,
            direction: direction,
            gateway: gateway,
            gateway_id: gatewayId,
            currency: currency
          };

          let actual = yield paymentMethodClient.createPaymentMethodPayload(gateway, direction)(userId, description, type, gatewayId, currency);
          expect(actual).to.eql(expected);
          done();
        }).catch(done);
      });
    });

    describe('getPaymentMethodByGatewayId', () => {
      let gatewayId = 1;
      it('returns a payment method given a gateway id if it exists', done => {
        let response = nock(configs.data_api.url).get('/getPaymentMethodByGatewayId/1/').reply(200, {id: 1});
        let expected = {id: 1};
        co(function * () {

          let actual = yield paymentMethodClient.getPaymentMethodByGatewayId(gatewayId, mock_koa);
          expect(actual).to.eql(expected);
          response.done();
          done();
        }).catch(done);
      });

      it('returns false if the payment method does not exist', done => {
        let response = nock(configs.data_api.url).get('/getPaymentMethodByGatewayId/1/').reply(404);
        co(function * () {

          let actual = yield paymentMethodClient.getPaymentMethodByGatewayId(gatewayId, mock_koa);
          expect(actual).to.be.false;
          response.done();
          done();
        }).catch(done);
      });

      it('returns an error if the status code is not 200 or 404', done => {
        let response = nock(configs.data_api.url).get('/getPaymentMethodByGatewayId/1/').reply(500);
        co(function * () {
          yield paymentMethodClient.getPaymentMethodByGatewayId(gatewayId, mock_koa);
          done('Should not make it here');
        }).catch(err => {

          expect(err.internalCode).to.eql(351);
          expect(err.name).to.eql('InternalServerError');
          expect(err.res).to.exist;
          response.done();
          done();
        }).catch(done);
      });
    });

    describe('getPaymentMethodByIdForUserAndGateway', () => {
      let userId = 1;
      let paymentMethodId = 123;
      let gateway = 'stripe';

      it('returns a payment method given a user id and payment method id and gateway if it exists', done => {
        let response = nock(configs.data_api.url).get('/getPaymentMethodByIdForUserAndGateway/1/123/stripe/').reply(200, {id: 1});
        let expected = {id:1};
        co(function * () {

          let actual = yield paymentMethodClient.getPaymentMethodByIdForUserAndGateway(userId, paymentMethodId, gateway,
             mock_koa);
          expect(actual).to.eql(expected);
          response.done();
          done();
        }).catch(done);
      });

      it('returns false if the payment method does not exist', done => {
        let response = nock(configs.data_api.url).get('/getPaymentMethodByIdForUserAndGateway/1/123/stripe/').reply(404);
        co(function * () {

          let actual = yield paymentMethodClient.getPaymentMethodByIdForUserAndGateway(userId, paymentMethodId, gateway,
             mock_koa);
          expect(actual).to.be.false;
          response.done();
          done();
        }).catch(done);
      });
    });

    describe('getPaymentMethodByGatewayIdForUserAndGateway', () => {
      let userId = 1;
      let gatewayId = 123;
      let gateway = 'stripe';

      it('returns a payment method given a user id and gateway id and gateway if it exists', done => {
        let response = nock(configs.data_api.url).get('/getPaymentMethodByGatewayIdForUserAndGateway/1/123/stripe/').reply(200, {
          id: 1
        });
        let expected = {
          id: 1
        };
        co(function*() {

          let actual = yield paymentMethodClient.getPaymentMethodByGatewayIdForUserAndGateway(userId, gatewayId, gateway, mock_koa);
          expect(actual).to.eql(expected);
          response.done();
          done();
        }).catch(done);
      });

      it('returns false if the payment method does not exist', done => {
        let response = nock(configs.data_api.url).get('/getPaymentMethodByGatewayIdForUserAndGateway/1/123/stripe/').reply(404);
        co(function*() {

          let actual = yield paymentMethodClient.getPaymentMethodByGatewayIdForUserAndGateway(userId, gatewayId, gateway, mock_koa);
          expect(actual).to.be.false;
          response.done();
          done();
        }).catch(done);
      });
    });
  });
})();
