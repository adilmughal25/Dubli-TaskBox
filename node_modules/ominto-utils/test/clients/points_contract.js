'use strict';
(function () {

  const points = require('../../src/clients/points')(configs);
  const incrementPointsForUser = points.incrementPointsForUser;
  const decrementPointsForUser = points.decrementPointsForUser;
  const getPointsForUser = points.getPointsForUser;
  const getPointsBalanceForUser = points.getPointsBalanceForUser;
  const getPointsValueFromAmountAndCurrency = points.getPointsValueFromAmountAndCurrency;

  const assertUserPointsRequestBody = (actual, expected) => actual.user_id === expected.user_id && actual.points_id === expected.points_id && actual.expiration;
  const assertPointsDecrementRequestBody = (actual, expected) => actual.amount === -Math.abs(expected.amount) && actual.lifetime_in_seconds === expected.lifetime_in_seconds && actual.name === expected.name && actual.description === expected.description;

  let pointsPayload, expectedUserPointsPayload, sandbox;

  describe('points client', () => {

    before(() => {
      sandbox = sinon.sandbox.create();
    });
    after(() => {
      sandbox.restore();
    });
    beforeEach(() => {
      pointsPayload = {
        amount: 123,
        lifetime_in_seconds: 123456789,
        name: 'test',
        description: 'description'
      };

      expectedUserPointsPayload = {
        user_id: 'test',
        points_id: 1
      };
    });

    afterEach(() => {
      pointsPayload = {};
    });

    it('is available as an object', () => {
      expect(points).to.be.a('object');
    });

    describe('incrementPointsForUser', () => {
      it('is available as a function', () => {
        expect(incrementPointsForUser).to.be.a('function');
      });

      it('returns the responses from the call to data, sending a positive point value to points', done => {

        let createPoints = nock(configs.data_api.internalUrl).post('/createPoints/', pointsPayload).reply(201, {id: 1});
        let createUserPoints = nock(configs.data_api.internalUrl).post('/createUserPoints/', body => {
          return assertUserPointsRequestBody(body, expectedUserPointsPayload);
        }).reply(201, {id: 2});

        co(function*() {
          let actual = yield incrementPointsForUser('test', pointsPayload, 'reqId', 'sessionId');
          expect(actual.points.statusCode).to.equal(201);
          expect(actual.userPoints.statusCode).to.equal(201);
          expect(actual.points.body).to.eql({id: 1});
          expect(actual.userPoints.body).to.eql({id: 2});
          createPoints.done();
          createUserPoints.done();
          done();
        }).catch(done);
      });

      it('returns the responses from the call to data, sending a positive point value to points that has been capped at 500', done => {
        let payload = {
          amount: 123456789,
          lifetime_in_seconds: 500000,
          name: 'test',
          description: 'description'
        };
        let expectedPointsPayload = {
          amount: 500,
          lifetime_in_seconds: 500000,
          name: 'test',
          description: 'description'
        };

        let createPoints = nock(configs.data_api.internalUrl).post('/createPoints/', expectedPointsPayload).reply(201, {id: 1});
        let createUserPoints = nock(configs.data_api.internalUrl).post('/createUserPoints/', body => {
          return assertUserPointsRequestBody(body, expectedUserPointsPayload);
        }).reply(201, {id: 2});

        co(function*() {
          let actual = yield incrementPointsForUser('test', payload, 'reqId', 'sessionId');
          expect(actual.points.statusCode).to.equal(201);
          expect(actual.userPoints.statusCode).to.equal(201);
          expect(actual.points.body).to.eql({id: 1});
          expect(actual.userPoints.body).to.eql({id: 2});
          createPoints.done();
          createUserPoints.done();
          done();
        }).catch(done);
      });

      it('throws an error if it does not receive a 201 from data for points creation', done => {

        let createPoints = nock(configs.data_api.internalUrl).post('/createPoints/', pointsPayload).reply(500, 'InternalServerError');

        co(function*() {
          yield incrementPointsForUser('test', pointsPayload, 'reqId', 'sessionId');
          createPoints.done();
          done('Should not make it here');
        }).catch(err => {
          expect(err.message).to.equal('Failed to create Points : "InternalServerError"');
          done();
        }).catch(done);
      });
    });

    describe('decrementPointsForUser', () => {
      it('is available as a function', () => {
        expect(decrementPointsForUser).to.be.a('function');
      });

      it('returns the response from the call to data, sending a negative point value', done => {
        let createPoints = nock(configs.data_api.internalUrl).post('/createPoints/', body => assertPointsDecrementRequestBody(body, pointsPayload)).reply(201, {id: 1});
        let createUserPoints = nock(configs.data_api.internalUrl).post('/createUserPoints/').reply(201, {id: 2});

        co(function*() {
          let actual = yield decrementPointsForUser('test', pointsPayload, 'reqId', 'sessionId');
          expect(actual.points.statusCode).to.equal(201);
          expect(actual.userPoints.statusCode).to.equal(201);
          expect(actual.points.body).to.eql({id: 1});
          expect(actual.userPoints.body).to.eql({id: 2});
          createPoints.done();
          createUserPoints.done();
          done();
        }).catch(done);
      });

      it('throws an error if it does not receive a 201 from data for points creation', done => {

        let createPoints = nock(configs.data_api.internalUrl).post('/createPoints/', pointsPayload).reply(500, 'InternalServerError');

        co(function*() {
          yield decrementPointsForUser('test', pointsPayload, 'reqId', 'sessionId');
          createPoints.done();
          done('Should not make it here');
        }).catch(err => {
          expect(err.message).to.equal('Failed to create Points : "InternalServerError"');
          done();
        }).catch(done);
      });
    });

    describe('getPointsForUser', () => {
      it('is available as a function', () => {
        expect(getPointsForUser).to.be.a('function');
      });

      it('returns the response from the call to data', done => {
        let getPointsForUserRequest = nock(configs.data_api.internalUrl).get('/getUserPoints/test/?bypass=true').reply(200, {values: 'value'});
        co(function*() {
          let actual = yield getPointsForUser('test', 'reqId', 'sessionId');
          expect(actual.body).to.eql({values: 'value'});
          expect(actual.statusCode).to.equal(200);
          getPointsForUserRequest.done();
          done();
        }).catch(done);
      });
    });

    describe('getPointsBalanceForUser', () => {
      it('is available as a function', () => {
        expect(getPointsBalanceForUser).to.be.a('function');
      });

      it('returns the response from the call to data', done => {
        let getPointsBalanceForUserRequest = nock(configs.data_api.internalUrl).get('/getUserPointsBalance/test/?bypass=true').reply(200, 123456789);
        co(function*() {
          let actual = yield getPointsBalanceForUser('test', 'reqId', 'sessionId');
          expect(actual.body).to.eql(123456789);
          expect(actual.statusCode).to.equal(200);
          getPointsBalanceForUserRequest.done();
          done();
        }).catch(done);
      });
    });

    describe('getPointsValueFromAmountAndCurrency', () => {
      it('is available as a function', () => {
        expect(getPointsValueFromAmountAndCurrency).to.be.a('function');
      });

      it('returns the result of (amount * rate)(rounded to nearest whole number) * pointsmultiplier for large numbers with low conversion rates', done => {
        let amount = 625000;
        let rate = 0.016000;
        let expected = Math.floor(amount * rate) * configs.points.multiplier;

        let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(200, {rate: rate});
        co(function*() {
          let actual = yield getPointsValueFromAmountAndCurrency(amount, 'INR', mock_koa);
          expect(actual).to.eql(1000000);
          expect(actual).to.eql(expected);
          getConversionRate.done();
          done();
        }).catch(done);
      });

      it('returns the result of (amount * rate)(rounded to nearest whole number) * pointsmultiplier for small numbers with low conversion rates', done => {
        let amount = 1;
        let rate = 0.016000;
        let expected = Math.floor(amount * rate) * configs.points.multiplier;
        let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(200, {rate: rate});
        co(function*() {
          let actual = yield getPointsValueFromAmountAndCurrency(amount, 'INR', mock_koa);
          expect(actual).to.eql(0);
          expect(actual).to.eql(expected);
          getConversionRate.done();
          done();
        }).catch(done);
      });

      it('returns the result of (amount * rate)(rounded to nearest whole number) * pointsmultiplier for large numbers with high conversion rates', done => {
        let amount = 100000;
        let rate = 100;
        let expected = Math.floor(amount * rate) * configs.points.multiplier;
        let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(200, {rate: rate});
        co(function*() {
          let actual = yield getPointsValueFromAmountAndCurrency(amount, 'INR', mock_koa);
          expect(actual).to.eql(1000000000);
          expect(actual).to.eql(expected);
          getConversionRate.done();
          done();
        }).catch(done);
      });

      it('returns the result of (amount * rate)(rounded to nearest whole number) * pointsmultiplier for small numbers with high conversion rates', done => {
        let amount = 1;
        let rate = 100;
        let expected = Math.floor(amount * rate) * configs.points.multiplier;

        let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(200, {rate: rate});
        co(function*() {
          let actual = yield getPointsValueFromAmountAndCurrency(amount, 'INR', mock_koa);
          expect(actual).to.eql(10000);
          expect(actual).to.eql(expected);
          getConversionRate.done();
          done();
        }).catch(done);
      });
    });
  });
})();
