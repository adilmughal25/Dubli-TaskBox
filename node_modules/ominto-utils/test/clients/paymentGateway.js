'use strict';
(() => {

  const paymentGatewayClient = require('../../src/clients/paymentGateway')(configs);
  const REQID = 'testReqID';
  const SESSIONID = 'testSessionID';
  const REGION = 'us';
  const CURRENCY = 'usd';

  let context;

  describe('The paymentGateway client', () => {
    beforeEach(() => {
      context = {
        state: {
          logger: {
            fields: {
              req_id: REQID,
              session_id: SESSIONID
            }
          }
        }
      };
    });

    afterEach(() => {
      context = {};
      nock.cleanAll();
    });

    it('should be an object', () => {
      expect(paymentGatewayClient).to.be.a('object');
    });

    describe('determineAvailableGateways', () => {

      it('should be available as a function', () => {
        expect(paymentGatewayClient.determineAvailableGateways).to.be.a('function');
      });

      it('returns an empty array if given a direction we are not familiar with, not making any external calls', done => {
        co(function*() {
          let actual = yield paymentGatewayClient.determineAvailableGateways(REGION, CURRENCY, 'down', context);
          expect(actual).to.eql([]);
          done();
        }).catch(done);
      });

      it('returns an array of gateways that contain the payment gateways that are supported only by both the region and currency provided for the given direction, making an external call to getAvailablePaymentOptions for a direction of in', done => {
        let getPaymentOptions = nock(configs.data_api.internalUrl).get('/getAvailablePaymentOptions/' + REGION + '/' + CURRENCY + '/').reply(200, [ 'paypal', 'stripe' ]);
        co(function*() {
          let actual = yield paymentGatewayClient.determineAvailableGateways(REGION, CURRENCY, 'in', context);
          expect(actual).to.eql([ 'paypal', 'stripe' ]);
          getPaymentOptions.done();
          done();
        }).catch(done);
      });

      it('returns an array of gateways that contain the payment gateways that are supported only by both the region and currency provided for the given direction, making an external call to getAvailableTransactionOptions for a direction of out', done => {
        let getPaymentOptions = nock(configs.data_api.internalUrl).get('/getAvailableTransactionOptions/' + REGION + '/' + CURRENCY + '/').reply(200, [ 'paypal', 'stripe' ]);
        co(function*() {
          let actual = yield paymentGatewayClient.determineAvailableGateways(REGION, CURRENCY, 'out', context);
          expect(actual).to.eql([ 'paypal', 'stripe' ]);
          getPaymentOptions.done();
          done();
        }).catch(done);
      });
    });

    describe('checkIfTransactionSupported', () => {

      it('should be available as a function', () => {
        expect(paymentGatewayClient.checkIfTransactionSupported).to.be.a('function');
      });

      it('returns false if given a gateway that we do not recognize, not making any external calls.', done => {
        co(function*() {
          let actual = yield paymentGatewayClient.checkIfTransactionSupported(REGION, CURRENCY, 'in', 'unknownGateway',
           context);
          expect(actual).to.be.false;
          done();
        }).catch(done);
      });

      it('returns false if given a direction that we do not recognize, not making any external calls.', done => {
        co(function*() {
          let actual = yield paymentGatewayClient.checkIfTransactionSupported(REGION, CURRENCY, 'up', 'stripe',
           context);
          expect(actual).to.be.false;
          done();
        }).catch(done);
      });

      it('returns true if payment gateway is allowed for the given region and currency, making a call to getAvailablePaymentOptions for direction of in', done => {
        let getPaymentOptions = nock(configs.data_api.internalUrl).get('/getAvailablePaymentOptions/' + REGION + '/' +
         CURRENCY + '/').reply(200, [ 'paypal', 'stripe' ]);
        co(function*() {
          let actual = yield paymentGatewayClient.checkIfTransactionSupported(REGION, CURRENCY, 'in', 'stripe', context);
          expect(actual).to.be.true;
          getPaymentOptions.done();
          done();
        }).catch(done);
      });

      it('returns true if payment gateway is allowed for the given region and currency, making a call to getAvailableTransactionOptions for direction of out', done => {
        let getPaymentOptions = nock(configs.data_api.internalUrl).get('/getAvailableTransactionOptions/' + REGION +
         '/' + CURRENCY + '/').reply(200, [ 'paypal', 'stripe' ]);
        co(function*() {
          let actual = yield paymentGatewayClient.checkIfTransactionSupported(REGION, CURRENCY, 'out', 'stripe',
           context);
          expect(actual).to.be.true;
          getPaymentOptions.done();
          done();
        }).catch(done);
      });

      it('returns false if payment gateway is not allowed for the given region or currency, making a call to getAvailablePaymentOptions for direction of in', done => {
        let getPaymentOptions = nock(configs.data_api.internalUrl).get('/getAvailablePaymentOptions/' + REGION +
        '/' + CURRENCY + '/').reply(200, [ 'paypal', 'stripe' ]);
        co(function*() {
          let actual = yield paymentGatewayClient.checkIfTransactionSupported(REGION, CURRENCY, 'in', 'dwolla',
           context);
          expect(actual).to.be.false;
          getPaymentOptions.done();
          done();
        }).catch(done);
      });
    });
  });
})();
