"use strict";

const paymentClient = require('../../src/clients/payment')(configs);

describe('The payment client', () => {

  it('should be an object', () => {
    expect(paymentClient).to.be.a('object');
  });

  describe('getPaymentBySourcePaymentId', () => {

    it('should be available as a function', () => {
      expect(paymentClient.getPaymentBySourcePaymentId).to.be.a('function');
    });

    it('returns segments associated with given userid if successful', done => {
      co(function*() {
        let getPaymentBySourcePaymentIdRequest = nock(configs.data_api.internalUrl).get('/getPaymentBySourcePaymentId/sourceId/').reply(200, {paymentId: 'values'});
        let actual = yield paymentClient.getPaymentBySourcePaymentId('sourceId', false, mock_koa);
        expect(actual).to.eql({paymentId: 'values'});
        getPaymentBySourcePaymentIdRequest.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let getPaymentBySourcePaymentIdRequest = nock(configs.data_api.internalUrl).get('/getPaymentBySourcePaymentId/sourceId/').reply(500);
      co(function*() {
        yield paymentClient.getPaymentBySourcePaymentId('sourceId', false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.message).to.equal('Internal Server Error');
        getPaymentBySourcePaymentIdRequest.done();
        done();
      }).catch(done);
    });
  });

  describe('getPaymentStatusById', () => {

    it('should be available as a function', () => {
      expect(paymentClient.getPaymentStatusById).to.be.a('function');
    });

    it('returns the status of a payment if a payment is returned', done => {
      co(function*() {
        let dataFlow = nock(configs.data_api.internalUrl).get('/getPaymentById/1234/?bypass=true').reply(200, {
          id: 1234,
          status: 'initiated'
        });
        let actual = yield paymentClient.getPaymentStatusById(1234, mock_koa);
        expect(actual).to.eql('initiated');
        dataFlow.done();
        done();
      }).catch(done);
    });

    it('returns null if data returns a 404', done => {
      co(function*() {
        let dataFlow = nock(configs.data_api.internalUrl).get('/getPaymentById/1234/?bypass=true').reply(404);
        let actual = yield paymentClient.getPaymentStatusById(1234, mock_koa);
        expect(actual).to.eql(null);
        dataFlow.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let dataFlow = nock(configs.data_api.internalUrl).get('/getPaymentById/1234/?bypass=true').reply(500);
      co(function*() {
        yield paymentClient.getPaymentStatusById(1234, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.message).to.equal('Internal Server Error');
        dataFlow.done();
        done();
      }).catch(done);
    });
  });

  describe('getPaymentsForUser', () => {

    it('should be available as a function', () => {
      expect(paymentClient.getPaymentsForUser).to.be.a('function');
    });

    it('returns array of payments for a user, bypassing cache if given true for bypass cache', done => {
      co(function*() {
        let dataFlow = nock(configs.data_api.internalUrl).get('/getPaymentsForUser/1234/?bypass=true').reply(200, [{
          id: 1234
        }, {
          id: 234
        }]);
        let actual = yield paymentClient.getPaymentsForUser(1234, true, mock_koa);
        expect(actual).to.eql([{
          id: 1234
        }, {
          id: 234
        }]);
        dataFlow.done();
        done();
      }).catch(done);
    });

    it('returns array of payments for a user', done => {
      co(function*() {
        let dataFlow = nock(configs.data_api.internalUrl).get('/getPaymentsForUser/1234/').reply(200, [{
          id: 1234
        }, {
          id: 234
        }]);
        let actual = yield paymentClient.getPaymentsForUser(1234, false, mock_koa);
        expect(actual).to.eql([{
          id: 1234
        }, {
          id: 234
        }]);
        dataFlow.done();
        done();
      }).catch(done);
    });

    it('returns undefined if data returns a 404', done => {
      co(function*() {
        let dataFlow = nock(configs.data_api.internalUrl).get('/getPaymentsForUser/1234/').reply(404);
        let actual = yield paymentClient.getPaymentsForUser(1234, false, mock_koa);
        expect(actual).to.eql(null);
        dataFlow.done();
        done();
      }).catch(done);
    });
  });
});
