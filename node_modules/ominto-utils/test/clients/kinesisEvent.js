"use strict";
const kinesisEventClient = require('../../src/clients/kinesisEvent.js')(configs);

const STREAM_NAME = 'DoNotCrossTheStreams';
const EVENT_TYPE = 'Epic event';
const PAYLOAD = {
  data: 'The Dataz(Now with Splendata)'
};
const FLAGS = {};
const JWT = {
  user: {
    email: 'test@email.com',
    id: 'testuserid'
  }
};
let logger;

describe('The kinesisEvent client', function () {

  before(function (done) {
    co(function*() {

      logger = bunyan.createLogger({
        name: 'kinesisEvent-script-tests',
        serializers: {
          req: bunyan.stdSerializers.req,
          res: bunyan.stdSerializers.res,
          err: utils.serializers.err
        }
      }).child({
        req_id: 'testReqId',
        session_id: 'testSessionId',
        ip: '127.0.0.1',
        method: 'doStuff',
        path: '/this/path',
        querystring: '?test&tests'
      });

      done();
    }).catch(function (err) {
      done(err);
    });
  });

  it('should be an object', function () {
    expect(kinesisEventClient).to.be.a('object');
  });

  describe('putEvent', function () {

    it('should be available as a function', function () {
      expect(kinesisEventClient.putEvent).to.be.a('function');
    });

    // todo: this test is totally pointless if it just expects the status code you tell it to receive...
    it('returns a response object with statusCode of ??? if successful', function (done) {
      var anyNumberYouWant = 23532512;
      co(function* () {
        let dataResponse = nock(configs.data_api.internalUrl).put('/submitEvent/' + STREAM_NAME + '/').reply(anyNumberYouWant, {});
        let actual = yield kinesisEventClient.putEvent(STREAM_NAME, EVENT_TYPE, PAYLOAD, FLAGS, JWT, logger);
        expect(actual.body).to.eql({});
        expect(actual.statusCode).to.equal(anyNumberYouWant);
        dataResponse.done();
        done();
      }).catch(done);
    });
  });
});
