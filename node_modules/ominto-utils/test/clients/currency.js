'use strict';

const currency = require('../../src/clients/currency')(configs);
const FROM_CURRENCY = 'INR';
const TO_CURRENCY = 'USD';

let sandbox;

describe('The currency wrapper', () => {

  beforeEach(done => {
    co(function * () {
      sandbox = sinon.sandbox.create();
      done();
    }).catch(done);
  });

  afterEach(() => {
    sandbox.restore();
  });

  it('should be an object', () => {
    expect(currency).to.be.a('object');
  });

  describe('getCurrencyConversionRate', () => {

    it('returns an exchange rate', done => {
      co(function *() {
        let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(200, {rate: 1.24});
        let actual = yield currency.getCurrencyConversionRate(FROM_CURRENCY, TO_CURRENCY, mock_koa);
        expect(actual).to.equal(1.24);
        getConversionRate.done();
        done();
      }).catch(done);
    });

    it('throws a Bad Request error if there is no response body', done => {
      let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(200);
      co(function *() {
        yield currency.getCurrencyConversionRate(FROM_CURRENCY, TO_CURRENCY, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.name).to.equal('BadRequestError');
        expect(err.message).to.equal('No currency conversion rate found in the database');
        getConversionRate.done();
        done();
      }).catch(done);
    });

    it('throws a 400 error is a 400 is received from data', done => {
      let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(400, {message: 'this is your error message'});
      co(function *() {
        yield currency.getCurrencyConversionRate(FROM_CURRENCY, TO_CURRENCY, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.name).to.equal('BadRequestError');
        expect(err.message).to.equal('this is your error message');
        getConversionRate.done();
        done();
      }).catch(done);
    });

    it('throws an Internal Server error if a 500 response is received', done => {
      let getConversionRate = nock(configs.data_api.internalUrl).get('/getConversionRate/?from=inr&to=usd').reply(500, {message: 'this is your error message'});
      co(function *() {
        yield currency.getCurrencyConversionRate(FROM_CURRENCY, TO_CURRENCY, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.name).to.equal('InternalServerError');
        expect(err.message).to.equal('this is your error message');
        getConversionRate.done();
        done();
      }).catch(done);
    });
  });

});
