'use strict';
(function () {

  const clients = require('../../src/clients/clients');
  let sandbox;

  describe('clients', () => {

    before(() => {
      sandbox = sinon.sandbox.create();
    });
    after(() => {
      sandbox.restore();
    });

    it('is available as an object', () => {
      expect(clients).to.be.a('object');
    });

    describe('getPointClient', () => {
      it('is available as a function', () => {
        expect(clients.getPointClient).to.be.a('function');
      });

      it('returns the point client with its available functions', done => {
        co(function *() {
          let actual = clients.getPointClient();
          expect(actual.incrementPointsForUser).to.be.a('function');
          expect(actual.decrementPointsForUser).to.be.a('function');
          expect(actual.getPointsForUser).to.be.a('function');
          expect(actual.getPointsBalanceForUser).to.be.a('function');
          expect(actual.getPointsValueFromAmountAndCurrency).to.be.a('function');
          done();
        }).catch(done);
      });
    });

    describe('getCurrencyClient', () => {
      it('is available as a function', () => {
        expect(clients.getCurrencyClient).to.be.a('function');
      });

      it('returns the currency client with its available functions', done => {
        co(function *() {
          let actual = clients.getCurrencyClient();

          expect(actual.getCurrencyConversionRate).to.be.a('function');
          done();
        }).catch(done);
      });
    });

    describe('getDeviceClient', () => {
      it('is available as a function', () => {
        expect(clients.getDeviceClient).to.be.a('function');
      });

      it('returns the device client with its available functions', done => {
        co(function *() {
          let actual = clients.getDeviceClient();
          expect(actual.createDevice).to.be.a('function');
          expect(actual.getDeviceByDeviceId).to.be.a('function');
          expect(actual.changeDevicePin).to.be.a('function');
          expect(actual.assignDeviceToUser).to.be.a('function');
          expect(actual.assignUsersDevicesToNewUser).to.be.a('function');
          expect(actual.deleteDevice).to.be.a('function');
          done();
        }).catch(done);
      });
    });
  });
})();
