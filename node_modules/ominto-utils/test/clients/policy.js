"use strict";
const policyClient = require('../../src/clients/policy')(configs);

describe('The policy client', function () {

  it('should be an object', function () {
    expect(policyClient).to.be.a('object');
  });

  describe('getPolicies', function () {
    let ids = [1,2,3];
    let validDataResponse = [{id: 1, body: 'test'}, {id:2, body: 'test'}, {id:3, body: 'test'}];

    it('should be available as a function', function () {
      expect(policyClient.getPolicies).to.be.a('function');
    });

    it('returns array of policies with given ids on success', done => {
      co(function*() {
        let dataFlow = nock(configs.data_api.internalUrl).log(console.log).get('/getPolicies/?ids=[1,2,3]').reply(200, validDataResponse);
        let actual = yield policyClient.getPolicies(ids, false, mock_koa);
        expect(actual).to.eql(validDataResponse);
        dataFlow.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode when data returns a 404', done => {
      let dataFlow = nock(configs.data_api.internalUrl).get('/getPolicies/').query(true).reply(404);
      co(function*() {
        yield policyClient.getPolicies(ids, false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(180);
        expect(err.message).to.equal('No Policies Found');
        dataFlow.done();
        done();
      }).catch(done);
    });

    it('returns an error with internalCode if data returns a 500', done => {
      let dataFlow = nock(configs.data_api.internalUrl).get('/getPolicies/').query(true).reply(500);
      co(function*() {
        yield policyClient.getPolicies(ids, false, mock_koa);
        done('Should not make it here');
      }).catch(err => {
        expect(err.internalCode).to.equal(351);
        expect(err.res).to.exist;
        expect(err.message).to.equal('Internal Server Error');
        dataFlow.done();
        done();
      }).catch(done);
    });
  });
});
