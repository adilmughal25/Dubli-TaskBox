'use strict';

const clientFactory = require(__basedir + 'src/utils/rest-client');

describe('REST Client', function () {

  const config = configs.data_api;
  let client, ctx;

  beforeEach(() => {
    nock.disableNetConnect();
    ctx = {
      logger: mock_koa.state.logger
    };
  });

  afterEach(() => {
    nock.cleanAll();
  });

  describe('Standard defaults', function () {

    beforeEach(() => {
      client = clientFactory(config);
    });

    describe('With Context', function () {

      it('should make a simple GET request successfully', function (done) {
        const nocked = nock(config.url).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

        co.wrap(client.get)('/me', {}, ctx)
          .then(result => {
            expect(result).to.be.an('object');
            expect(result.body).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            done(err);
          });
      });

       it('should make a simple POST with no response body successfully', function (done) {
        const nocked = nock(config.url).post('/me').reply(201);

        co.wrap(client.simple().post)('/me', {}, ctx)
          .then(result => {
            expect(result).to.not.exist;
            nocked.done();
            done();
          })
          .catch(done);
      });

      it('should make a simple GET with no response body successfully', function (done) {
        const nocked = nock(config.url).get('/me').reply(201);

        co.wrap(client.simple().get)('/me', {}, ctx)
            .then(result => {
              expect(result).to.not.exist;
              nocked.done();
              done();
            })
            .catch(done);
      });

      it('should not throw an error on non-2xx response', function (done) {
        const nocked = nock(config.url).get('/me').reply(500);

        co.wrap(client.get)('/me', {}, ctx)
          .then((result) => {
            expect(result).to.have.deep.property('res.statusCode').that.is.equal(500);
            expect(result).to.have.deep.property('res.request.headers.X-Request-Id').that.match(/testReqId, [a-f0-9-]{35}/);
            nocked.done();
            done(new Error("wasn't supposed to make it here"));
          })
          .catch(err => {
            expect(err).to.exist;
            nocked.done();
            done();
          });
      });

      it('should fail the promise on non-2xx response in simple mode', (done) => {
        const nocked = nock(config.url).get('/me').reply(500);

        co.wrap(client.simple().get)('/me', {}, ctx)
            .then(() => {
              nocked.done();
              done(new Error("wasn't supposed to make it here"));
            })
            .catch(err => {
              expect(err).to.have.deep.property('response.statusCode').that.is.equal(500);
              expect(err).to.have.deep.property('response.request.headers.X-Request-Id').that.match(/testReqId, [a-f0-9-]{35}/);
              nocked.done();
              done();
            }).catch(done);
      });

      it('should handle arrays in the querystring correctly', function (done) {
        const nocked = nock(config.url).get('/me?items=[1,2,3]').reply(200, {'email': 'fake-user@ominto.com'});

        co.wrap(client.get)('/me', {
          items: [1, 2, 3]
        }, ctx)
          .then(result => {
            expect(result).to.be.an('object');
            expect(result.body).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            done(err);
          });

      });

      it('should not try to serialize the context as the query', (done) => {
        const nocked = nock(config.url).get('/me').reply(201);

        co.wrap(client.simple().get)('/me', ctx)
            .then(result => {
              expect(result).to.not.exist;
              nocked.done();
              done();
            })
            .catch(done);
      });

      it('should not try to serialize the context as the body', (done) => {
        const nocked = nock(config.url).post('/me').reply(201);

        co.wrap(client.simple().post)('/me', ctx)
            .then(result => {
              expect(result).to.not.exist;
              nocked.done();
              done();
            })
            .catch(done);
      });
    });

    describe('Without Context', function () {

      it('should make a simple GET request successfully', function (done) {
        const nocked = nock(config.url).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

        co.wrap(client.get)('/me', {}, ctx)
          .then(result => {
            expect(result).to.be.an('object');
            expect(result.body).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            done(err);
          });
      });

      it('should throw an error on non-2xx response', function (done) {
        const nocked = nock(config.url).get('/me').reply(500);

        co.wrap(client.get)('/me', {})
          .then(() => {
            nocked.done();
            done(new Error("wasn't supposed to make it here"));
          })
          .catch(err => {
            expect(err).to.not.have.deep.property('res.request.headers.X-Request-Id');
            nocked.done();
            done();
          });
      });

    });

    describe('With Bound Context', function () {

      beforeEach(() => {
        client = client.bind(ctx);
      });

      it('should make a simple GET request successfully', function (done) {
        const nocked = nock(config.url).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

        co.wrap(client.get)('/me', {})
          .then(result => {
            expect(result).to.be.an('object');
            expect(result.body).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(done);
      });

      it('should throw an error on non-2xx response', function (done) {
        const nocked = nock(config.url).get('/me').reply(500);

        co.wrap(client.get)('/me', {})
          .then(() => {
            nocked.done();
            done(new Error("wasn't supposed to make it here"));
          })
          .catch(err => {
            expect(err).to.have.deep.property('res.request.headers.X-Request-Id').that.match(/testReqId, [a-f0-9-]{35}/);
            nocked.done();
            done();
          })
          .catch(done);
      });

    });

  });

  describe('Default to Simple Mode', function () {

    beforeEach(() => {
      client = clientFactory(config, true);
    });

    describe('With Context', function () {

      it('should make a simple GET request successfully', function (done) {
        const nocked = nock(config.url).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

        co.wrap(client.get)('/me', {}, ctx)
          .then(result => {
            expect(result).to.be.an('object');
            expect(result).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            done(err);
          });
      });

      it('should throw an error on non-2xx response', function (done) {
        const nocked = nock(config.url).get('/me').reply(404);

        co.wrap(client.get)('/me', {}, ctx)
          .then(() => {
            nocked.done();
            done(new Error("wasn't supposed to make it here"));
          })
          .catch(() => {
            nocked.done();
            done();
          });
      });

    });

    describe('Without Context', function () {

      it('should make a simple GET request successfully', function (done) {
        const nocked = nock(config.url).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

        co.wrap(client.get)('/me', {})
          .then(result => {
            expect(result).to.be.an('object');
            expect(result).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            done(err);
          });
      });

      it('should throw an error on non-2xx response', function (done) {
        const nocked = nock(config.url).get('/me').reply(404);

        co.wrap(client.get)('/me', {})
          .then(() => {
            nocked.done();
            done(new Error("wasn't supposed to make it here"));
          })
          .catch(() => {
            nocked.done();
            done();
          });
      });

    });

    describe('With Bound Context', function () {

      beforeEach(() => {
        client = client.bind(ctx);
      });

      it('should make a simple GET request successfully', function (done) {
        const nocked = nock(config.url).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

        co.wrap(client.get)('/me', {})
          .then(result => {
            expect(result).to.be.an('object');
            expect(result).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            done(err);
          });
      });

      it('should throw an error on non-2xx response', function (done) {
        const nocked = nock(config.url).get('/me').reply(404);

        co.wrap(client.get)('/me', {})
          .then(() => {
            nocked.done();
            done(new Error("wasn't supposed to make it here"));
          })
          .catch(() => {
            nocked.done();
            done();
          });
      });

    });

  });

  describe('Non-standard defaults', function () {

    it('should have bearer auth from function', function (done) {
      client = clientFactory(_.set(config, 'auth', () => ({bearer: 'token'})));
      const nocked = nock(config.url, {reqheaders: {authorization: 'Bearer token'}}).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

      co.wrap(client.get)('/me', {}, ctx)
          .then(result => {
            expect(result).to.be.an('object');
            expect(result.body).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            console.log(JSON.stringify(err, null, 2));
            done(err);
          });
    });

    it('should have basic auth from literal', function (done) {
      client = clientFactory(_.set(config, 'auth', {user: 'user', 'pass': 'secret'}));
      const nocked = nock(config.url, {reqheaders: {authorization: /Basic .+/}}).get('/me').reply(200, {'email': 'fake-user@ominto.com'});

      co.wrap(client.get)('/me', {}, ctx)
          .then(result => {
            expect(result).to.be.an('object');
            expect(result.body).to.have.property('email', 'fake-user@ominto.com');

            nocked.done();
            done();
          })
          .catch(err => {
            console.log(JSON.stringify(err, null, 2));
            done(err);
          });
    });

  });

});
