"use strict";

describe('utils/date', function () {
  var expect = require('chai').expect;
  var date = require('../../src/utils/date.js');
  var expectedFormat;

  beforeEach(function () {
    expectedFormat = /^((\d{4})-([01]\d)-([0-3]\d))T((([0-2]\d):([0-5]\d):([0-5]\d))\.(\d{3}))Z$/;
  });

  afterEach(function () {
    expectedFormat = {};
  });

  describe('formatDateForData', function () {
    it('is available as a function', function () {
      expect(date.format).to.be.a('function');
    });

    it('throws an error if it receives an invalid date', function () {
      function format () {
        date.format("invalidDate");
      }

      expect(format).to.throw();
    });

    it('should parse date from parameter', function () {
      expect(date.format(Date.now())).to.match(expectedFormat);
      expect(date.format(new Date().toISOString())).to.match(expectedFormat);
      expect(date.format(date.now())).to.match(expectedFormat);
    });

    it('formats the date to expected format if given a valid date', function () {
      var dateToFormat = new Date();
      var actual = date.format(dateToFormat);
      expect(actual).to.match(expectedFormat);
    });
  });

  describe('nowDateForData', function () {

    it('is available as a function', function () {
      expect(date.now).to.be.an('function');
    });

    it('returns now formatted for data', function () {
      var actual = date.now();
      expect(actual).to.match(expectedFormat);
    });
  });
});
