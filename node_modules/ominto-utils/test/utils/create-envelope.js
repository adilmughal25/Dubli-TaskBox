"use strict";

var expect = require('chai').expect;
var createEnvelope = require('../../src/utils/create-envelope.js');

describe('create-envelope', function () {

  describe('createTrigger', function () {

    it('is available as a function', function () {
      expect(createEnvelope.createTrigger).to.be.a('function');
    });

    it('Constructs an array object when given proper parameters, returning them as an array', function () {
      var o_logger = {};
      o_logger.fields = {
        ip: '127.0.0.1',
        req_id: 'wickedAwesomeNumbersAndLetters123',
        session_id: 'lessAwesomeNumbersAndLetters',
        method: 'doTheThingWithTheStuff',
        path: '/of/DEVASTATION',
        querystring: '?sameAsIt=everWas',
        req_body: null
      };
      var actual = createEnvelope.createTrigger(o_logger.fields.ip, o_logger.fields.req_id, o_logger.fields.session_id, o_logger.fields.method, o_logger.fields.path, o_logger.fields.querystring, o_logger.fields.req_body);
      expect(actual).to.be.a('array');
      expect(actual.length).to.equal(1);
    });

    it('returns an array if given a null ip', function () {
      var actual = createEnvelope.createTrigger(null);
      expect(actual).to.be.a('array');
      expect(actual.length).to.equal(1);
      expect(actual[0].ip).to.be.null;
      expect(actual[0].method).to.be.undefined;
      expect(actual[0].path).to.be.undefined;
      expect(actual[0].querystring).to.be.undefined;
      expect(actual[0].req_body).to.be.undefined;
      expect(actual[0].req_id).to.be.undefined;
      expect(actual[0].session_id).to.be.undefined;
      expect(actual[0].timestamp).to.be.a('number');
    });

    it('returns an array if given an object as the ip', function () {
      var actual = createEnvelope.createTrigger({});
      expect(actual).to.be.a('array');
      expect(actual.length).to.equal(1);
      expect(actual[0].ip).to.be.a('object');
      expect(actual[0].method).to.be.undefined;
      expect(actual[0].path).to.be.undefined;
      expect(actual[0].querystring).to.be.undefined;
      expect(actual[0].req_body).to.be.undefined;
      expect(actual[0].req_id).to.be.undefined;
      expect(actual[0].session_id).to.be.undefined;
      expect(actual[0].timestamp).to.be.a('number');
    });
  });

  describe('createEnvelope', function () {
    it('is available as a function', function () {
      expect(createEnvelope.createEnvelope).to.be.a('function');
    });

    it('returns a usable envelope with expected fields', function () {
      var s_type = 'test:type';
      var o_jwt = {tempJwt: 'dataz'};
      var o_data = {tempData: 'more-dataz'};
      var o_flags = {tempFlags: 'even-more-dataz'};
      var o_trigger = {tempTrigger: 'yet-again-even-more-dataz'};
      var actual = createEnvelope.createEnvelope(s_type, o_jwt, o_data, o_flags, o_trigger);
      expect(actual.id).to.exist;
      expect(actual.type).to.equal(s_type);
      expect(actual.timestamp).to.exist;
      expect(actual.jwt).to.equal(o_jwt);
      expect(actual.trigger).to.equal(o_trigger);
      expect(actual.flags).to.equal(o_flags);
    });

    it('always generates an id and timestamp for the returned envelope', function () {

      var actual = createEnvelope.createEnvelope(null, null, null, null, null);

      expect(actual.id).to.exist;
      expect(actual.timestamp).to.exist;
      expect(actual.type).to.be.null;
      expect(actual.jwt).to.be.null;
      expect(actual.trigger).to.be.null;
      expect(actual.flags).to.be.null;
    });
  });

  describe('createEnvelopeFromLogger', function () {
    it('is available as a function', function () {
      expect(createEnvelope.fromLogger).to.be.a('function');
    });

    it('returns a usable envelope with expected fields', function () {
      var s_type = 'test:type';
      var o_jwt = {tempJwt: 'dataz'};
      var o_data = {tempData: 'more-dataz'};
      var o_flags = {tempFlags: 'even-more-dataz'};
      var o_logger = {
        fields: {
          ip: '127.0.0.1',
          req_id: 'wickedAwesomeNumbersAndLetters123',
          session_id: 'lessAwesomeNumbersAndLetters',
          method: 'doTheThingWithTheStuff',
          path: '/of/DEVASTATION',
          querystring: '?sameAsIt=everWas'
        }
      };
      var actual = createEnvelope.fromLogger(s_type, o_jwt, o_data, o_flags, o_logger);
      expect(actual.id).to.exist;
      expect(actual.type).to.equal(s_type);
      expect(actual.timestamp).to.exist;
      expect(actual.jwt).to.equal(o_jwt);
      expect(actual.trigger).to.be.a('array');
      expect(actual.flags).to.equal(o_flags);
    });

    it('always returns an id and timestamp and creates an array for the trigger', function () {
      var actual = createEnvelope.fromLogger(null, null, null, null, null);

      expect(actual.id).to.exist;
      expect(actual.timestamp).to.exist;
      expect(actual.trigger).to.be.a('array');
      expect(actual.type).to.be.null;
      expect(actual.jwt).to.be.null;
      expect(actual.flags).to.be.null;
    });

  });
});
