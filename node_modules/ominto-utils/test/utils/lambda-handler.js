"use strict";

var expect = require('chai').expect;
var lambdaHandler = require('../../src/utils/lambda-handler.js');
var configs = {
  "data_api": {
    "url": "http://localhost:8090/",
    "auth": {}
  }
};

describe('The Lambda handler', function () {
  var sandbox;

  beforeEach(function(){
    sandbox = sinon.sandbox.create();
  });

  afterEach(function(){
    sandbox.restore();
  });

  it('is available as a function', function () {
    expect(lambdaHandler.handler).to.be.an('function');
  });

  it('returns a handler', function () {
    var actual = lambdaHandler.handler(configs, 'test', null);
    expect(actual).to.be.a('function');
    expect(actual.name).to.equal('handler');
  });

  function run (impls, resultsValidator) {
    const handler = lambdaHandler.handler(configs, impls);

    handler({
      Records: [{kinesis: {data: encodedData()}}]
    }, {
      awsRequestId: 'fake id',
      done: resultsValidator
    });

  }

  it('should match events using regex', function (done) {
    var log = require(__basedir + "src/utils/log");
    sandbox.stub(log);
    log.createLogger.returns({
      info: () => {},
      error: () => {},
      warn: () => {}
    });
    run({
      'regex:^userDid': sinon.stub().returns(Promise.resolve())
    }, (err, result) => {
      expect(err).to.not.exist;

      result = JSON.parse(result);

      expect(result).to.have.property('successes', 1, 'should have matched and processed');
      expect(result).to.have.property('misses', 0, 'should have found a handler');
      expect(result).to.have.property('failures', 0, 'should not have throw any errors');

      done();
    });
  });

  it('should not vomit on no match found', function (done) {
    run({
      'testThing': {}
    }, (err, result) => {
      result = JSON.parse(result);

      expect(result.misses).to.equal(1, 'should not have found a handler');
      expect(result.failures).to.equal(0, 'should not have thrown any errors');

      done();
    });
  });

  function encodedData () {
    return new Buffer(JSON.stringify({
      type: "userDid:initiatePayment",
      data: {}
    })).toString('base64');
  }
});
