"use strict";

const expect = require('chai').expect;
const errorHandler = require('../../src/utils/handle-api-error.js');
const noError = errorHandler.errorCheck(false);
const errorHandled = errorHandler.errorCheck(true);
const conditionMet = errorHandler.conditionMet;
let thrower;

describe('handle-api-error', () => {
  beforeEach(() => {
    thrower = {};
    thrower.throw = (statusCode, message, payload) => {
      throw new Error(statusCode, message, payload);
    };

  });
  let payload = {
    internalCode: 123,
    otherStuff: 'Can go here'
  };

  describe('errorCheck', () => {

    it('is available as a function', () => {
      expect(errorHandler.errorCheck).to.be.a('function');
    });

    it('Does not throw an error if the condition is not met', () => {
      expect(() => noError(500, 'Well, that was not supposed to happen', payload, thrower)).to.not.throw;
    });

    it('Throws an error if the condition is met', () => {
      expect(() => errorHandled(500, 'Well, that was not supposed to happen', payload, thrower)).to.throw();
    });
  });

  describe('conditionMet', () => {

    it('is available as a function', () => {
      expect(errorHandler.conditionMet).to.be.a('function');
    });

    it('Throws an error', () => {
      expect(() => conditionMet(500, 'Well, that was not supposed to happen', payload, thrower)).to.throw();
    });
  });
});
