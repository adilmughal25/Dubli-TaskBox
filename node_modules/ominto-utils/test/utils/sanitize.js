"use strict";

describe('utils/sanitize', function () {
  const expect = require('chai').expect;
  const sanitize = require('../../src/utils/sanitize.js');
  let uncleanJSON, cleanJSON, uncleanNestedJson;

  beforeEach(function () {
    uncleanJSON = {
      a: null,
      b: undefined,
      c: 'test',
      d: 123,
      e: n => n.toString()
    };
    cleanJSON = {
      a: 'test',
      b: 123,
      c: n => n.toString()
    };
    uncleanNestedJson = {
      a: {
        b: null,
        c: 1
      },
      d: 123,
      e: undefined,
      f: 'test',
      g: {
        h: {
          i: 'testi',
          j: undefined,
          k: null,
          l: 321,
          m: cleanJSON,
          n: uncleanJSON
        }
      }
    };

  });

  afterEach(function () {
    uncleanJSON = {};
    cleanJSON = {};
    uncleanNestedJson = {};
  });

  describe('nullAndUndefined', () => {
    it('is available as a function', function () {
      expect(sanitize.nullAndUndefined).to.be.a('function');
    });

    it('returns an object that has had the nulls and undefined key/values removed', function () {
      let actual = sanitize.nullAndUndefined(uncleanJSON);

      expect(actual).to.not.eql(uncleanJSON);
      expect(actual.a).to.not.exist;
      expect(actual.b).to.not.exist;
      expect(actual.c).to.equal('test');
      expect(actual.d).to.equal(123);
      expect(actual.e).to.be.a('function');
      expect(actual.e(123)).to.equal('123');
    });

    it('returns the entirety of an object if it has no null or undefined values', function () {
      let actual = sanitize.nullAndUndefined(cleanJSON);

      expect(actual).to.eql(cleanJSON);
      expect(actual.a).to.eql('test');
      expect(actual.b).to.equal(123);
      expect(actual.c).to.be.a('function');
      expect(actual.c(123)).to.equal('123');
    });

    it('handles an array, cleaning out null and undefined values from children', function () {
      let actual = sanitize.nullAndUndefined(arrayToTest);
      expect(actual[0].id).to.exist;
      expect(actual[0].amount_fee).to.not.exist;
      expect(actual[0].undefined_field).to.not.exist;
      expect(actual[1].id).to.exist;
      expect(actual[1].amount_fee).to.not.exist;
      expect(actual[1].undefined_field).to.not.exist;
      expect(actual[2].id).to.exist;
      expect(actual[2].amount_fee).to.not.exist;
      expect(actual[2].undefined_field).to.not.exist;
    });

    it.skip('handles nested json, filtering out only the undefined and null key/values', function () {
      let actual = sanitize.nullAndUndefined(uncleanNestedJson);

      expect(actual).to.not.eql(uncleanNestedJson);
      expect(actual.a).to.eql({c: 1});
      expect(actual.d).to.equal(123);
      expect(actual.e).to.not.exist;
      expect(actual.f).to.equal('test');
      expect(actual.g).to.equal('123');
    });

    it('handles arrays, clearing out null and undefined values from itself', function () {
      let actual = sanitize.nullAndUndefined([null, undefined]);
      expect(actual).to.be.an('array').that.is.empty;
    });

  });
});

const arrayToTest = [{
  id: 1234,
  undefined_field: undefined,
  amount_fee: null
}, {
  id: 1235,
  undefined_field: undefined,
  amount_fee: null
}, {
  id: 1236,
  undefined_field: undefined,
  amount_fee: null
}];
